/* Generated by Edge Impulse
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/
// Generated on: 12.12.2021 16:41:49

#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

constexpr int kTensorArenaSize = 81824;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[23];
TfLiteEvalTensor tflEvalTensors[23];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[11];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,40000 } };
const TfArray<1, float> quant0_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(8) int32_t tensor_data1[2] = { -1, 1600, };
const TfArray<1, int> tensor_dimension1 = { 1, { 2 } };
const ALIGN(8) int32_t tensor_data2[8] = { 7160, 3634, -8589, 1201, -440, -11326, 2234, -13881, };
const TfArray<1, int> tensor_dimension2 = { 1, { 8 } };
const TfArray<8, float> quant2_scale = { 8, { 2.3833137674955651e-05, 2.7398653401178308e-05, 2.3076005163602531e-05, 2.4813254640321247e-05, 2.3333301214734092e-05, 7.2053449002851266e-06, 2.6592309950501658e-05, 1.7894992197398096e-05, } };
const TfArray<8, int> quant2_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(8) int32_t tensor_data3[16] = { -1019, -201, 23, -3311, 89, -1904, -1840, -3303, -378, -3289, 353, -4060, -2795, 1032, -471, -2600, };
const TfArray<1, int> tensor_dimension3 = { 1, { 16 } };
const TfArray<16, float> quant3_scale = { 16, { 0.00016835534188430756, 9.889686043607071e-05, 0.00020806169777642936, 0.00012380621046759188, 0.00011015331256203353, 0.0001763198379194364, 0.00017058498633559793, 0.00017205522453878075, 0.00017249261145479977, 8.6270069004967809e-05, 0.00013361706805881113, 8.8735250756144524e-05, 0.00012469920329749584, 0.00018799779354594648, 0.00014782216749154031, 0.00013307426706887782, } };
const TfArray<16, int> quant3_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(8) int32_t tensor_data4[5] = { -1383, -1235, 99, 7400, -86, };
const TfArray<1, int> tensor_dimension4 = { 1, { 5 } };
const TfArray<1, float> quant4_scale = { 1, { 0.00032558792736381292, } };
const TfArray<1, int> quant4_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(8) int8_t tensor_data5[5*1600] = { 
  -7, 12, 6, -4, 3, 20, -15, 12, 16, -11, 3, 0, 6, 15, 15, 26, -15, 21, 13, 16, 4, 22, 23, 16, 25, 9, 21, 9, -4, 46, 29, 16, 15, 16, 16, 2, 15, 22, 15, -10, 16, 7, 38, 5, 26, 8, 34, -5, -1, 25, 9, 1, 4, 13, 17, -4, 13, -18, 10, 9, -23, 20, 9, 0, 0, 14, 17, -9, 30, 15, 19, 5, 13, -3, 9, 10, -6, 36, 12, 19, -10, 2, -12, -28, 2, -13, 33, -26, 5, -12, 16, 13, -12, 5, 26, -5, 11, 31, -5, 5, 25, 30, -2, 15, 31, -14, 30, -4, 4, -1, 37, -11, -17, 14, 15, -13, 13, 26, 33, -24, -10, -8, 1, 2, -24, 8, 19, -19, 1, -27, -3, -3, 14, 4, 38, -17, -7, -8, 14, -6, -20, -13, 38, -18, 1, -16, 13, -18, 1, -2, 2, -7, -22, -27, -3, -17, -8, 10, 17, -14, -19, -24, 9, -16, 4, 14, -4, 2, -3, -26, -17, -5, -38, 4, 3, -21, -24, -36, 5, 15, 13, 31, 4, 4, 9, 5, -4, 18, 44, 6, -32, 7, -10, 5, 29, -24, 12, -5, 23, -12, 17, -21, -23, -10, 6, -26, -32, 29, -11, 39, 22, 18, 10, 0, 16, -16, 21, -10, -23, 8, 9, -33, -18, -1, 5, 23, 12, 0, 6, -3, 21, 7, -5, 9, 33, -4, 9, -31, 3, 22, -6, 9, 10, 7, 3, 15, -4, 3, 9, -12, -4, 4, 14, -7, -15, 4, -16, -33, 12, -4, -5, 8, -2, 3, 13, -21, -18, 15, -14, -27, -10, 19, 1, 0, 6, -9, 4, 7, -1, -14, 16, 9, -2, 13, 3, -19, -5, -8, 14, 25, -3, -3, 5, -22, -1, -26, -6, 10, -2, -2, 29, -8, -27, -13, 7, 9, 14, -5, -7, -10, 20, 3, 3, 10, -24, -16, 14, 49, -6, 5, -5, 25, 15, -2, 1, 17, 34, 18, -5, -4, 12, 6, -23, -19, 23, 17, -16, -13, 22, -27, -18, 11, 8, 9, -8, -23, -1, -5, -11, 2, 8, -11, -14, 12, 0, -28, -9, 5, 15, 13, -3, -15, -25, 8, -9, -9, 0, 16, -35, -2, 13, 0, -5, -1, 29, 20, 23, -15, 11, 4, -13, -17, 6, -10, -17, -7, -3, -32, -4, -12, -1, -19, -19, -48, -23, -7, -40, -13, -8, -16, -6, -6, 14, -2, -5, 0, -6, -1, -10, -14, -18, 8, 31, -22, -12, -17, 17, 36, 9, 15, -14, 0, 11, 33, 11, 1, -18, -9, 15, -2, -27, -2, 7, -26, 34, -17, -11, 7, -38, -10, 11, 11, 17, -6, -5, -34, 5, -8, 4, -10, 12, 5, 12, 10, -15, 7, 7, -6, -4, -3, -17, -36, -2, 26, -5, 14, 12, -4, 25, 36, 16, -5, 8, -8, 9, 28, 18, -27, 18, 15, -3, -5, 0, 5, 20, 1, 49, 2, 23, -11, -4, 40, -13, -26, 26, 8, 9, -8, 9, 14, -3, 16, 34, 4, -5, -11, 8, -2, -2, -3, -16, -2, -12, 31, 13, -8, -3, 5, 6, 12, 4, -22, -19, -10, -17, 8, -12, -25, -24, -13, 15, 12, 17, 15, 12, -9, 8, -19, -10, -14, -69, -38, -3, 14, -34, -20, -5, -21, 7, -4, 3, -11, -26, -21, -10, -13, -51, -12, 10, -16, 4, 10, -6, -8, -7, -9, 21, -15, 8, -12, -7, -14, -32, 12, 23, -7, 15, 5, 4, 4, -7, -8, -13, -2, 34, 16, 27, -18, 38, 25, 37, 24, 23, 35, 14, 4, -4, -22, -2, -13, 5, 13, 28, -13, -5, -28, 35, 17, 10, 16, -3, -7, -26, 0, -10, -2, 7, -4, 12, 0, -20, 32, 27, -28, 5, -27, 20, -6, -9, 1, -14, 33, 22, -10, 21, 0, 7, -8, -3, -4, -6, 16, -15, -16, -13, 19, 12, -17, -5, 9, -9, 13, -9, -13, -25, 10, 2, 6, -4, -10, 10, 6, -6, -29, 1, 7, 11, 10, 13, -9, 2, 13, -4, 1, -1, -22, 18, 12, 39, -11, 11, -2, 6, 17, 16, -30, 9, 33, -1, 48, -6, -7, 16, 25, 37, -4, 5, -9, 18, 30, 22, -33, 35, 11, -21, -27, 4, -18, 1, -2, 32, -8, -13, -47, -13, -5, -56, -32, -1, -19, -6, -8, 16, 1, -8, -10, -7, -16, 14, 5, -20, -24, 7, -34, -5, 4, 2, 3, 24, 4, -9, 0, 12, -15, 11, 23, 29, 19, 46, 22, 8, 1, 8, 16, 17, -4, -14, -12, -6, -12, -22, 3, 7, 0, 66, 14, 10, 4, 6, 19, 11, -11, -10, 11, 2, 12, 1, -24, -19, 4, -29, 27, -11, 2, -12, -36, -9, -24, 6, -4, 19, -14, -41, -21, -17, -5, -35, 0, -1, -5, -9, -25, 3, -5, -1, 15, -21, -6, -20, -1, -5, -4, -3, -2, 21, 11, -19, 22, 10, 1, 16, 23, 20, 7, -3, -7, -10, -13, 2, 20, 8, 26, -21, -38, 24, -17, 21, 13, -2, -23, 2, -26, -20, 15, -29, 0, 23, 6, 5, -16, 13, -15, 15, -7, 56, -18, -3, -25, -10, -1, 4, -18, 37, 4, -10, -35, 6, -14, 3, 15, 9, -5, 4, 7, 15, 5, 8, -13, 27, -16, 11, 7, 3, -2, 27, 12, 25, -11, 0, -1, -7, 14, -6, -64, 12, 8, -5, -31, -5, 5, 2, 31, -11, -22, -11, 9, -18, 13, -1, -11, 21, 0, 18, -11, -2, -4, 31, 13, 24, 10, 5, -31, -5, 15, -30, -1, 8, -13, -6, 2, 26, -16, -5, 8, 29, -21, -3, -23, -17, -13, -3, -40, 11, -8, -10, -12, -6, -18, -7, -14, 1, -1, -3, -28, -13, 3, -11, -45, 10, -9, -17, -19, 12, -9, -13, 7, -13, 13, -12, -24, -28, -11, -23, 1, -2, -2, -26, 0, 12, 15, 5, 8, -9, 26, 40, -41, -9, -2, -13, 17, -16, 3, -13, 1, 27, -12, -31, -9, -3, -21, 2, -5, 8, -11, 3, -33, 14, -11, 6, -9, -4, -2, 8, 8, -6, -4, -2, -24, -5, 13, -16, -5, 3, -23, -25, -1, 18, -11, -11, 5, -1, 17, 3, -22, 3, -6, 32, -31, -5, 15, -4, 3, -15, 0, -11, -5, 22, -26, 14, -6, -1, 11, 2, -37, 10, 5, -5, 13, -1, -7, 3, -6, 22, -10, 9, -11, -16, 21, -18, -30, 9, -4, 3, -13, -17, 20, 1, 0, 35, -6, 12, 2, 21, 15, 34, 12, 23, -2, 16, 18, 4, -2, -3, -5, 9, 0, 10, 12, 19, 30, 18, -33, 16, -4, -2, -4, 1, -4, -7, -12, 10, -12, 1, -28, -5, -10, 7, -30, 8, -20, -4, 14, 10, -4, 3, 7, -4, 7, 16, -2, -16, 7, -18, -8, 0, 20, 3, 28, 17, -8, -19, 7, 17, -2, 2, -4, 11, 3, -2, -24, 14, -8, -27, -4, -19, -38, -12, -6, 3, 0, -4, -24, 1, 6, -22, -7, 31, -12, -14, -5, 4, -14, 1, -8, 19, -8, 3, -1, 18, -6, 6, -21, 23, 13, -3, -17, -17, 1, -9, -5, -11, -5, 7, -18, -11, 13, -18, -43, -12, -23, -39, -44, -7, -31, -13, -4, -11, -9, -7, -13, -6, -6, 40, -45, -32, -18, 7, 36, -1, 7, -6, 7, 8, 18, 12, -20, -42, 20, 1, -33, -47, -4, -12, 7, -1, -11, -17, 4, 7, -15, -9, -20, -1, -8, -17, -37, 20, 14, -3, -12, 2, -18, -4, -6, 13, 11, 13, -18, 2, 5, -7, -27, 19, 10, 2, 1, -7, 16, 2, 11, 18, -10, 18, 10, 14, 3, -26, -17, 36, -6, 19, 17, 25, 5, -3, 4, 21, 6, 1, 13, 9, 13, 16, -43, 24, 4, -15, 2, 26, 13, 5, 7, 9, 20, 6, -5, 6, -2, -7, 10, 34, 15, -8, 21, 31, -33, 17, 11, 14, -36, -9, -40, -4, 17, -10, 0, 13, -4, -24, 7, 12, -4, 22, 3, 9, 18, -18, -47, -9, -20, -51, -28, 0, 14, -27, -13, 21, -19, -2, 28, 7, -8, 0, -16, -22, 36, -20, -7, -18, 15, 10, -14, 4, 7, -3, 8, 48, -9, 16, 15, 13, 3, 31, 6, 2, -1, 22, 33, 14, 32, -4, -4, 9, 10, 48, 22, 31, -2, 33, 22, 27, 21, 18, 32, 16, -1, -9, -5, 4, -5, 26, 28, 35, 20, 39, 8, 41, 26, 10, 6, -1, -26, -11, -19, -13, -33, -2, -21, 6, -8, -12, 34, 30, -9, -9, -23, -19, 2, -1, -20, 33, -36, -7, -4, 8, -25, -21, -12, 6, -20, 9, 22, -5, -24, -6, -32, 1, -33, -1, 12, 31, -3, 31, 7, 29, 12, -10, -8, -1, -10, -1, -7, 0, -18, 28, 12, 34, 11, 24, 31, 16, 3, -9, 14, -17, -31, -4, 23, 17, -39, -6, -27, 21, 23, -8, -1, 13, -3, -11, -15, 10, -2, 21, 23, 45, -14, 25, 5, 2, 31, 31, -11, 9, -14, -8, 36, 16, -12, 27, -3, 41, -10, -22, -29, -12, 0, -3, -7, 17, 20, -27, -10, 19, -20, -16, -13, 21, -6, 0, -28, -5, -12, -44, 21, 20, 4, -14, 4, 39, 6, 26, 18, -3, -3, 18, -7, 9, 14, -21, 13, -16, 22, 2, 55, 9, -3, 2, -6, 16, 8, -5, 12, 12, -1, 3, -10, 43, 31, -22, 14, 25, -8, 2, 19, 13, 4, 10, -6, 13, 7, -13, 35, 41, -6, -20, 28, -5, 7, 5, 37, 19, -12, 26, 9, 26, -9, -15, 5, 28, -4, 
  -12, -25, -9, -34, 12, -49, 2, -63, -68, -64, 6, -40, -7, -7, 18, -21, -3, -13, 8, -43, 11, -15, -10, -32, -44, -36, -18, -13, 0, 3, -9, 21, -3, 0, -7, -20, 17, -17, 12, -9, -44, -20, -16, -4, 1, 18, 6, 20, -7, -15, 3, -46, 30, -23, 17, -71, -36, -41, 9, -16, -2, -23, 8, 2, -4, -20, 13, -25, 34, -15, 34, -39, -70, -49, -6, -7, -12, -16, 12, 20, -9, -33, 19, -5, 26, -11, 35, -15, -53, -6, 7, -26, -12, -19, -13, 29, -4, -11, -14, -31, 5, -5, -11, -31, -68, -64, -23, -17, -8, -12, -57, 16, -9, -19, -6, -28, 19, -30, -11, -46, -56, -38, -19, -39, -6, 1, -27, 15, 1, 3, 17, -26, 19, -21, 13, -30, -48, -26, -7, -18, -18, -32, 18, 8, -8, -20, 6, -6, 21, -25, 26, -59, -51, -52, -13, -5, -14, -49, 7, 16, 1, -6, -4, -14, 22, -19, 6, -43, -25, -22, -8, -31, -12, 13, -18, 3, -17, -8, -5, -25, 6, -21, -3, -29, -48, -31, -5, -19, -4, -25, -9, 0, -11, -22, -15, -24, -3, -2, 10, -41, -24, -36, -2, -4, -1, -2, -37, -4, 1, -14, 1, -44, 15, -30, -7, -48, -57, -38, -15, -20, -5, -9, -31, 10, -9, -21, 1, -38, 16, -37, 5, -27, -60, -31, -12, -31, -8, -37, -20, 13, -2, -33, 31, -47, 16, -53, -16, -47, -78, -70, -14, -32, -16, -4, -21, 29, -3, -20, -14, -16, 16, -3, -2, -24, -34, -26, -12, -14, -3, 18, -52, 2, 2, -19, 3, -15, 2, -24, -18, -44, -34, -21, 2, -49, -9, -1, -9, -19, -7, 3, -40, -52, 39, -27, -11, -67, -69, -33, -6, 2, -5, 3, -8, 31, 0, -8, 28, -32, 13, -18, -6, -18, -33, -30, -1, -10, -2, -25, -1, 37, 1, 5, -10, -23, 19, -19, 31, -42, -29, -32, -7, -13, -18, -18, -16, 37, -2, -19, 40, -1, 6, -29, -26, -38, -1, -5, -11, -33, -7, -12, -23, 38, -6, 9, -1, -16, 17, -3, 0, -32, 5, 4, 8, -11, 24, -44, -8, -5, 7, 31, 9, -22, 24, -22, -10, -56, -43, -27, -4, -42, -4, -7, -5, 20, 0, -13, 2, -27, 3, -41, -2, -34, -51, -36, -13, -17, -7, 24, -6, 36, -2, -23, 14, -29, 16, -42, -37, -54, -47, -23, -6, -54, -7, 15, -19, -4, 16, -7, -27, -37, 14, -46, -22, -36, -59, -34, -7, -39, -1, -36, -40, 30, 0, -12, 19, -36, 7, -55, -27, -29, -50, -40, -27, -23, -21, 7, -26, 36, -5, -20, 18, -12, 0, -34, 18, -59, -30, -32, -16, -20, -3, -32, 1, 13, 11, -16, 24, -23, 35, -31, 7, -25, -23, -39, -12, -3, -1, -21, -2, 24, -6, -7, -3, -1, -4, -11, 62, -32, -25, -6, 4, -4, -4, -30, -33, 7, -6, -19, 13, -55, 19, -43, -47, -42, -87, -33, -11, -33, -8, -32, -25, 17, -6, -30, 9, -58, 13, -35, 12, -90, -79, -47, -24, -64, -23, 11, -29, 33, -2, 4, 18, -43, 7, -57, -27, -45, -38, -22, -13, -43, -16, -8, 2, 40, -8, -40, 12, -22, 10, -47, -3, -45, -3, -3, 17, -26, 2, 1, -9, 39, 21, 34, 9, -21, 6, -41, 14, -31, -21, -20, -7, -35, 7, -18, -2, 15, 6, -10, -5, -17, 5, -75, 6, -70, 12, 6, 4, -16, -3, -36, 2, 8, 0, 19, -14, -26, -6, -19, -14, -50, -19, -20, 1, -23, 6, -15, -1, -9, -1, -15, -24, -41, 1, -86, -10, -93, -72, -32, -9, -38, -13, -20, -4, 9, -2, -3, -2, -31, 15, -44, -50, -46, -32, -25, -4, -11, -8, -20, -14, 23, 2, -4, 21, -29, 15, -24, 10, -51, -38, -22, -13, -18, -21, 8, -37, 23, 1, -2, -7, -9, -9, -37, 23, -26, 0, -4, -2, -1, -2, -3, -26, -1, 3, -7, -10, -10, 5, -25, 9, -56, -36, -32, 3, -29, -1, 3, -33, -26, 1, -12, -28, -35, 16, -33, -17, -47, -59, -42, -17, -41, -7, 2, -56, 33, 4, -14, 52, -15, 12, -29, 20, -46, -26, -4, -22, -27, -15, -69, -25, 44, 7, 5, 27, -27, 15, -53, 19, -56, -53, -54, 0, -39, -13, -59, -7, 23, -4, -46, 24, -20, -3, -42, -1, -37, -3, -30, -7, -52, -6, 5, -38, 37, 2, 7, -9, -20, -3, -53, -16, -43, -30, 9, 17, -38, 35, -46, -40, 21, -2, 21, -2, -54, 2, -61, -4, -75, -76, -44, -12, -46, -29, -34, -21, 4, -8, -34, 27, -45, 0, -60, -40, -61, -81, -58, -7, -29, -21, 4, 21, 20, -5, -15, -3, -56, 3, -13, -5, -25, -45, -60, -15, -19, -11, -29, -52, 0, -11, -14, -9, -46, 19, -21, -8, -90, -68, -43, -33, -28, -42, -34, -22, -5, -17, -26, 10, -34, 17, -68, 3, -66, -77, -31, -22, -47, -3, -38, -11, 32, -7, -16, -19, -54, -6, -45, 2, -80, -82, -29, -12, -27, 2, -50, -9, 1, -3, -1, 6, -35, 6, -44, 25, -59, -58, -62, -13, -20, -15, -55, -29, 17, -9, -28, 3, -30, -4, -24, 7, -48, -79, -51, -7, -32, -20, -58, -33, 7, -2, -27, -19, -31, 17, -28, -35, -56, -72, -41, -7, -10, -2, -23, -16, 15, 1, -13, 7, -31, 21, -37, -6, -56, -65, -39, -21, -22, 3, -65, -21, 10, -5, -22, 15, -27, 31, -80, -13, -85, -24, -28, -17, -23, 6, -28, -13, 35, 9, 2, 5, -28, 18, -25, 50, -43, -34, -20, 3, -2, 18, -5, 0, -11, 4, 27, -18, -31, 12, -13, 19, -8, -21, -20, -11, -8, -14, -39, -45, 4, -5, 1, 8, -20, -12, -40, 1, -73, -40, -28, -4, -27, -9, -24, -50, 8, -3, -20, -8, -34, 24, -37, -7, -55, -28, -19, -2, -26, 1, -33, -4, 25, -13, -23, 22, -32, 4, -28, 34, -51, -52, -33, -16, -16, 2, -30, -25, 32, 3, -15, -5, -26, 7, -26, -5, -33, -47, -31, -14, -17, -5, -35, -49, 16, 5, -22, 12, -35, 25, -13, 1, -41, -60, -60, -25, -8, -4, -30, -23, 41, -9, -16, -28, -7, 3, -39, 33, -27, -17, -3, -1, 2, -1, 27, -6, -20, 7, -8, -7, -14, -3, -52, -3, -41, -19, 4, 14, -28, 3, 14, 16, -24, 2, 17, 15, -15, 20, -23, -20, -39, -42, -37, -1, -15, -7, 0, 0, 13, 9, -25, 19, -4, 13, -20, 18, -20, 3, 3, -10, -2, -3, 14, -17, 22, 14, 23, 4, -38, 15, -25, 3, -53, -37, -25, -5, -12, 4, -33, -19, 37, 3, -17, -3, -25, 2, -26, 21, -67, -47, -32, -6, -9, -11, -51, -28, 12, -21, 0, 0, -21, -2, -12, 13, -53, -42, -31, -9, -33, -16, -61, 7, 1, -2, 5, 25, -36, 27, -13, -16, -64, -47, -28, -7, -41, -9, -17, -15, 27, -8, -15, 34, -36, 8, -31, 7, -17, -45, -68, -10, -36, -16, -19, 11, 33, -15, -32, 14, -27, 7, -35, -7, -40, -35, -21, -5, -22, -3, -18, 2, 25, 7, -19, -1, -18, 12, -44, -28, -47, -3, -29, 12, -30, -5, -28, -2, 11, 5, 11, 17, -46, -10, -36, 13, -54, -42, -17, -10, -37, 3, 9, -19, 18, 6, -5, 24, -52, 12, -45, -19, -31, -57, -38, 1, -38, -5, -14, 8, 8, -6, -1, 25, -20, 14, -18, 31, -35, -75, -33, -4, -35, -17, -18, -10, 41, 0, -14, -19, -9, 11, -40, 6, -55, -1, 5, 17, 3, -8, -28, -30, 23, 5, 1, 16, -25, 30, -42, -22, -34, -24, -28, 6, -14, 4, -20, -27, 38, -3, -6, 31, -31, 10, -33, 5, -41, -50, -30, -11, -54, -6, -13, -39, 40, -2, 8, 27, -47, 28, -23, -21, -37, -53, -25, -32, -13, -7, -63, -15, 36, -18, -19, 47, -27, 8, -45, 6, -38, -42, -38, -4, -13, -6, -5, 14, 31, -2, -20, 2, -15, 9, -9, -13, -22, -19, -38, -20, -15, -7, -58, -22, 32, -3, -27, 13, -20, 4, -18, -34, -61, -19, -28, -2, -28, -17, -27, -22, 7, 12, -8, 6, -9, 2, -26, -26, -27, -33, 4, -19, -17, 7, 1, -43, 6, 16, -3, 0, -33, -4, -52, -25, -23, -47, -29, -19, -10, -2, -10, -46, 11, 4, -4, 4, -56, 24, -24, -3, -45, -66, -34, -18, -27, -15, -29, -10, 22, -10, -23, 9, -34, 7, -33, 4, -42, -18, -30, -15, -9, -39, -11, -23, 23, 6, -14, -25, -9, -2, -10, 6, -36, -4, -9, -16, 9, 0, 2, -30, -28, 20, 15, -11, -10, 5, -19, -8, -47, -27, -10, 12, -18, 2, -28, -30, 9, 13, 11, -29, -17, 36, -15, -1, -40, -40, -17, -8, -11, -12, -14, -30, 32, 11, 6, 21, -14, 13, -14, 6, -16, -63, -7, 0, -9, 6, -11, -66, 39, 5, -15, 23, -28, 34, -14, -10, -51, -54, -40, -22, -5, -18, -1, -50, 40, -16, -47, 26, -35, 14, -31, -9, -48, -62, -56, -29, -28, -1, 6, -48, 35, -11, 1, 8, -41, 20, -19, 9, -70, -39, -30, -36, -29, -14, 6, -25, 22, -22, 7, 45, -38, 6, -43, 4, -61, -57, -44, -15, -58, -6, -60, -18, 33, 2, -12, 26, -31, 18, -60, -6, -60, -50, -48, -12, -28, -16, -6, -6, 24, 
  -6, -34, 26, -12, -2, -43, -17, -45, -31, 2, -20, 4, -2, -38, -59, 20, -15, -2, -23, -5, 12, -82, 45, -15, 13, -9, -26, 1, 17, -68, -4, -3, -5, 14, -9, -22, -25, -84, 6, -43, -5, -2, 8, 2, -12, -32, -16, 1, -9, -28, -67, -30, -16, -78, -65, -47, -9, -15, -26, -3, -10, -10, -67, 5, -8, 17, -24, 2, -23, -60, -103, -33, -9, 23, -2, 1, 25, -58, -54, 3, 9, 32, 5, -7, 4, -72, -44, -29, -16, -15, -39, -31, -24, -29, 3, 12, -9, -15, 18, 12, -39, -69, -20, 3, -18, -9, -3, -23, -1, -48, -6, -11, -6, -38, -29, -10, -17, -42, -65, -13, -25, -16, -22, -25, -48, -12, -39, -12, 8, 16, -5, 6, 18, -39, -87, -23, 4, 14, -6, -4, 19, -11, -11, 27, 14, -2, 49, 36, 36, 26, -30, 26, 5, 25, 4, 20, 6, -56, 0, 40, -11, 26, -21, 20, -1, 13, 43, 5, -3, 7, -24, 18, 24, -10, -11, -13, 4, -13, -13, 0, -7, -24, -71, -11, 10, 6, 3, 2, 14, -45, 23, -10, 18, 12, -5, 5, 2, -36, -39, 0, -9, 13, 5, -15, 4, -12, 41, -35, -24, -24, -27, -8, -25, -16, -62, -9, -24, -3, 10, -46, -4, -1, -5, -55, 0, -22, -3, -10, 14, -5, -110, 2, -6, -17, -30, 1, -19, -21, -72, -23, -1, 19, -11, 19, 12, 0, 47, 15, 0, 16, -11, -9, -16, -29, -11, -15, 16, 33, 2, 5, 31, -45, 31, 3, -9, 14, 11, 1, -59, -23, 67, -11, -1, 0, 18, 20, -20, -18, -49, 30, 13, 21, 14, -18, -4, 17, 30, 20, -16, 15, 18, -19, 10, -13, -39, -6, -23, -22, -18, -35, -33, -11, 24, 6, -19, -32, -21, -13, 30, -18, -7, -32, -6, 1, -13, -7, -36, -17, 21, -19, 3, -13, 12, 3, 21, 9, -40, 13, -12, 9, 17, 4, -8, -30, 11, -23, -4, 20, -10, 15, 3, -5, 10, 11, 22, 10, -7, -6, 15, -27, 17, 4, 1, 2, 34, 12, 20, -21, -10, -21, 16, 26, 17, -9, 9, -7, 26, 8, 7, -4, 5, 1, 20, -1, -14, -14, 1, -4, 3, 0, 16, -5, -4, 28, -3, -8, -16, 3, 23, 14, 2, -23, 18, 14, 18, -2, 7, 7, -9, -6, -4, -8, 35, 8, 6, -23, -5, -43, 11, 7, 8, 3, 24, 11, -52, 9, 11, 4, -8, 3, -29, -41, -37, -42, 18, 17, 17, -4, 7, -11, -35, -9, 8, 24, -22, 13, 7, -58, -19, -28, 5, 13, 8, 1, 22, -7, 5, 19, 7, -6, -17, -20, -16, -72, -33, -38, 7, -7, 1, 10, 8, 23, 2, 2, -8, 0, -6, 8, -55, -34, -29, -15, -2, 12, 17, 10, 30, -4, -17, -2, 12, 12, 7, 6, 3, -36, -88, -20, 2, 9, 11, 2, 26, 22, -22, 6, 6, 1, 23, -4, 11, -10, -106, -3, -2, 5, 5, -3, -4, -19, -32, 29, -12, -15, 15, -5, 16, -45, -32, -28, 2, 13, 9, 16, 13, -6, -112, 8, 5, 13, -17, 3, -18, -52, -29, -9, -14, 11, 8, 4, 46, 10, -127, -5, 10, 30, -21, -1, 17, -30, -5, 6, -3, 0, -7, -2, 4, -5, 15, -19, 2, -2, 18, -3, 1, -23, 3, -7, -32, -9, 8, -16, -14, 21, 54, 6, -19, -52, 39, 4, 12, 31, -28, -2, 2, -6, -22, 2, -32, 19, -20, -11, 10, 2, 20, 16, 20, 42, -5, 8, 6, 12, -18, 21, -7, 43, -32, 0, 2, -29, 33, 6, 25, 37, 4, 16, 8, 20, 13, 20, 18, 27, -19, -24, 17, -7, 19, -17, 28, 15, -8, -26, -33, -6, -20, -12, -5, 18, 0, -4, -1, -15, 56, 3, 49, -1, -4, 1, -16, -15, -12, -5, 6, 1, 15, 11, -4, -5, 44, -6, 23, 32, 35, 9, 4, -18, 6, -4, -17, -5, -5, -15, -10, 0, 4, 5, 24, -10, -28, -6, 9, -9, -2, -2, 3, 24, -26, 10, 2, 3, 11, 10, 14, -32, -21, 8, 4, 25, 5, 3, 13, -3, 9, 3, 8, 11, -19, 16, 6, -39, -7, -15, 17, 9, 11, 7, 10, 11, 6, -29, 22, 1, 5, 14, 37, 4, -68, -1, -2, 20, 17, 5, 13, -4, -35, -17, 3, -34, -26, -5, 11, 3, -20, 3, -9, -14, 1, -11, -24, 7, -31, -40, -12, -11, -12, -2, 32, 18, -34, -1, 6, -8, -13, -2, -36, 5, -18, 8, -3, -29, -9, 5, 10, 20, 20, -19, -2, -3, 11, 5, 12, -11, -15, 20, -4, 11, 41, 19, -22, 48, -5, 20, 46, 8, 8, 16, 28, 9, -26, 13, -2, 10, 0, -4, 25, 27, -10, -4, 23, 9, 13, 8, 10, -5, -20, 2, 11, 15, -31, 0, -27, -53, 17, -25, 6, 12, -7, -10, 15, 19, 2, -36, 5, 42, -20, -11, -14, -89, -32, -9, -26, -12, 31, -20, 3, 19, 52, -14, -4, 9, 21, -7, -3, -80, -64, -28, 4, 9, 5, -4, 8, 36, -37, 37, 15, 26, 16, 20, 7, -22, -3, 6, -6, 7, 0, 15, -1, 11, -41, -6, -9, -16, 41, 10, 1, -17, -20, -19, 16, -7, 10, -6, 6, 38, -40, 5, 9, 1, 0, -32, 1, -83, -19, -63, 10, -9, -4, -2, -1, -8, -31, 2, -11, 1, 34, 11, -35, -69, -54, -39, 8, 19, 19, -25, 14, 25, -56, 4, 19, 22, 9, 7, -25, -32, -61, -2, 5, 12, 9, -9, -2, 13, -45, -14, -3, 7, -6, 4, 17, -1, -48, -15, -14, 15, 8, -7, -20, 12, -19, -8, 3, 4, 14, 10, 23, -31, 77, -35, 29, 19, 11, 7, 37, 20, 27, -19, 20, 11, 69, 20, 16, -6, -17, 4, 1, 27, 32, -8, 21, 3, 40, -2, 5, 15, 16, 2, 8, 12, 7, -8, 11, 7, 14, 5, -5, 21, 4, 7, 10, 22, 62, 6, 21, 21, 17, -5, 9, 10, -6, -22, 6, 17, 8, 6, 6, 24, 9, 10, 10, -7, -8, 4, 24, 3, -5, -3, -40, 22, -23, -53, -4, -18, 26, -5, 33, 0, 0, -6, -8, -5, -17, -27, -30, 15, 17, -10, -3, -9, 56, 10, 48, -27, 14, -4, -15, 14, 22, -19, -16, -11, 18, 8, 15, 21, 16, 6, -18, 0, -23, 22, 0, -10, 8, 1, -28, 14, -9, -25, -8, 8, 24, -8, 19, 3, -76, -14, -10, 1, -27, -19, -44, 29, -80, -15, 25, 16, 37, -3, 19, 18, -21, 4, 31, 8, -1, 3, -7, 20, -31, 32, 2, 5, -3, 1, 10, -38, 18, -32, -6, 8, 39, 2, 10, 8, -47, -6, 0, -32, 4, -6, -9, -85, -35, -35, 10, 7, 3, -4, 19, 2, -101, -25, 8, -4, -25, 24, 4, 2, -86, -13, 22, 36, 28, 8, 25, 42, -19, 8, 26, 6, 35, -2, 9, -29, 41, -22, -14, 14, 21, -13, 30, 5, -57, 12, -10, 7, 21, -21, -33, -25, -15, -30, 10, -3, 1, -22, 0, 12, -44, -29, 5, 46, 21, 6, 22, -14, -93, -42, -15, -9, -21, -28, -7, 16, -22, 4, -16, -31, 12, -25, 11, 16, 5, -22, 9, -16, 12, -16, -35, 29, 5, 2, 1, -23, 34, -23, 40, -15, 10, -57, 0, 23, 26, -1, 8, 32, 10, -17, 14, 18, 9, 21, 18, -43, -75, -4, 28, 20, 12, 8, 13, 39, -33, 28, 15, 14, 2, 34, 2, 15, -1, 9, 19, 18, 16, 20, 42, 13, -29, -17, 11, 25, 19, -5, 36, -30, -31, -6, -17, 1, -15, -9, -6, -22, -13, -1, -11, 6, 21, -10, -9, -20, -28, -5, -33, -37, -25, -43, -7, -20, -4, 14, -34, -32, 40, -7, 3, 8, -30, -13, -20, -3, -25, -28, -16, -9, -58, -12, 10, -5, 35, 17, -19, -1, 17, -5, 10, 20, 6, 19, 5, 22, -22, 8, 0, 25, 13, 23, -8, -4, -65, 14, 2, 8, 12, 1, 22, 7, 1, 9, 6, -2, 17, 10, 17, -1, -37, 5, -36, -6, -31, -6, -12, -10, -33, -10, -10, -48, 6, -7, 37, -11, 30, 22, -38, -20, -19, 8, -34, -13, -29, -35, -2, 2, -24, -23, -19, -25, -49, -5, -6, -33, -24, -16, -58, -7, 22, -30, 0, -45, -11, -1, 3, -3, 29, 14, 2, 21, 9, -19, -24, -38, -20, -38, 20, 18, 12, -5, -12, -2, -57, 5, -11, 8, -18, 20, -12, 8, 16, -15, 11, -45, 38, 5, 14, 6, -49, 30, -13, -7, -39, 26, -40, 31, 6, -44, -8, -1, -5, 22, -22, -24, -54, 30, -16, -9, -11, -1, 3, -13, 37, -31, -1, -28, 24, 6, 25, -58, 4, -2, -1, -8, -15, 7, 16, 33, 15, -16, 26, -17, 45, 14, -3, -40, -75, 8, -8, -1, 13, 2, -26, -9, 19, 29, 11, -33, 13, 13, 2, -28, -80, -4, -1, 26, 28, 6, 18, 10, 4, -13, -4, 9, -30, 1, 22, -32, -15, -11, -11, 2, -9, 11, 17, -64, 10, -23, 9, -29, 2, 7, 22, -33, -9, -14, -5, 12, -6, 22, 18, -8, 33, -16, 0, -29, 0, 0, 33, -56, -26, -61, 2, -14, -24, 24, 6, -10, 9, 4, 1, -1, -21, 7, 13, -46, -28, -14, -2, 9, 14, 10, 43, -14, -17, -2, -9, -19, -12, -39, -21, -81, -2, -19, -11, -20, -30, 5, 15, -58, -56, -33, 
  -10, -6, 26, -6, -18, -3, -6, -9, -25, -19, -3, -2, -4, 25, -11, -13, -5, -14, -13, -10, -13, -8, -10, -12, -32, -15, -11, -10, -7, -18, -6, -11, -6, -11, -6, -9, -29, -6, -12, -6, -37, -18, -10, -4, -4, -17, -5, -11, -6, -8, 5, -8, -13, -2, -5, -7, -35, -26, -13, -5, -10, 6, 1, -8, -4, -7, 14, -9, -23, 0, -7, -5, -35, -22, -8, -5, -11, -3, 0, -9, -12, -9, -13, -10, -26, -5, -11, -14, -37, -13, -8, -3, -9, -15, -3, -7, -6, -7, -4, -2, -23, -2, -4, -2, -29, -13, -13, -10, -4, -17, -10, -6, -13, -8, -2, -5, -19, -8, -12, -4, -25, -15, -5, -7, -7, -18, 1, -11, -3, -6, -10, -6, -18, -8, -7, -1, -43, -17, -6, -10, -8, -4, -10, -14, -11, -11, -3, -9, -25, -1, -9, -8, -39, -21, -8, -3, -4, -23, -7, -10, -4, -4, -11, -5, -30, -1, -12, -9, -42, -17, -7, -4, -8, -4, -6, -4, -5, -8, -8, -8, -25, -6, -9, -4, -41, -19, -10, -4, -5, -21, -6, -9, -4, -8, -11, -5, -17, -5, -9, -8, -26, -28, -18, -2, -8, -15, -10, -6, -9, -6, 5, -9, -28, -8, 1, -10, -33, -11, -13, -9, -8, 6, -1, -8, -11, -8, 0, -9, -26, -2, -11, -5, -23, -11, -5, -10, 0, -30, 1, -10, -6, -1, 11, -1, -19, -4, -8, -2, -27, -9, -3, -8, -5, -38, -5, -9, -10, -3, -2, -7, -24, -4, -7, -10, -47, -11, -14, -4, -4, -7, -7, -14, -6, -8, -2, -5, -20, -9, -3, -10, -44, -14, -6, -3, -3, 6, 0, -8, -10, -13, 17, -3, -15, -1, -15, -3, -34, -14, -10, -2, -6, -8, -7, -6, -8, -15, -5, -4, -29, 0, -6, -6, -18, -13, -9, -5, -5, -7, -4, -9, -4, -9, 3, -4, -24, -9, -10, -5, -34, -17, -7, -5, -9, -35, -4, -10, -3, -10, 0, -1, -31, -1, -11, -9, -33, -17, -8, -3, -1, -14, -6, -5, -8, -8, 0, -5, -18, -1, -5, -9, -23, -10, -8, -4, -3, -11, -6, -14, -10, -10, 1, -8, -32, -4, -10, -9, -31, -12, -15, -5, -6, -29, 2, -10, -11, -3, -10, -2, -21, -9, -15, -4, -25, -27, -13, -2, -3, -15, 0, -5, -8, -13, -5, -8, -22, -5, -12, -9, -22, -11, -12, -6, -1, -29, -5, -14, -8, -7, -17, -4, -19, -1, -7, -3, -44, -22, -11, -4, 0, -22, -10, -15, -5, -9, 6, -5, -25, -3, -8, -12, -50, -21, -9, -11, -13, -16, -5, -9, -8, -10, -12, -3, -25, 1, -8, -12, -35, -25, -14, -2, -4, -20, -4, -10, -11, -15, -11, -3, -21, 1, -3, -10, -41, -11, -12, -9, -1, -14, -11, -12, -4, -8, -7, -6, -21, -6, -5, -3, -40, -15, -10, -6, -3, 10, -5, -4, -13, -4, -6, -6, -21, -4, -3, -5, -69, -14, -16, -4, -3, -5, 0, -17, -9, -13, 3, -10, -23, -6, -8, -7, -43, -30, -11, -12, -8, -17, -6, -13, -5, -4, -6, -8, -21, -2, -11, -10, -42, -17, -11, -9, -9, -33, -7, -9, -4, -10, 1, -3, -23, -6, -3, -6, -28, -11, -6, -6, -2, -6, -5, -8, -4, -11, -32, -3, -22, -7, -16, -6, -39, -14, -6, -6, -4, -46, -6, -8, -5, -6, -27, 0, -20, 0, -8, -15, -21, -16, -9, -6, -3, -17, -1, -8, -10, -11, -19, -10, -18, -2, -4, -3, -40, -14, -11, -10, -3, -35, 6, -14, -10, -7, -19, -8, -26, -8, -3, -9, -32, -19, -10, -8, -1, -69, -4, -11, -4, -4, -20, -3, -23, -6, -4, -5, -47, -11, -13, -8, -2, -48, -6, -13, -11, -5, -11, -8, -35, -6, -8, -9, -37, -22, -11, -7, -9, -23, -11, -17, -11, -12, -12, -5, -20, -6, -9, -10, -29, -23, -11, -11, -9, -29, -4, -13, -5, -6, -10, -18, -31, -10, -11, -14, -43, -24, -16, -5, -8, -24, -10, -11, -12, -10, -6, -8, -31, -7, -17, -13, -38, -24, -15, -8, -4, -10, -10, -11, -9, -8, -2, -5, -33, -4, -18, -11, -39, -19, -11, -5, -5, -58, -7, -7, -7, -5, 9, -7, -29, -5, -27, -10, -42, -24, -14, -5, -5, -37, -3, -12, -11, -16, -6, -10, -18, -7, -9, -9, -49, -27, -11, -8, -8, -39, -5, -8, -14, -13, -13, -11, -42, -9, -17, -5, -74, -45, -20, -11, -4, -30, -19, -19, -11, -7, -23, -14, -27, -10, -37, -10, -98, -61, -25, -10, -13, -29, -18, -7, -15, -11, 0, -16, -12, -4, -10, -8, -87, -45, -25, -11, -18, -80, -4, -12, -21, -32, -9, -18, -24, -6, -10, -18, -102, -72, -22, -19, -33, -69, -5, -15, -18, -21, -23, -30, -27, -10, -4, -31, -77, -71, -16, -15, -33, -42, -5, -24, -17, -44, -1, -7, -26, -8, -10, -48, -55, -26, -16, -9, -13, -37, -7, -19, -11, -9, -8, -9, -34, -2, -8, -6, -66, -12, -9, -4, -12, -50, -5, -11, -10, -10, -15, -8, -26, -4, -5, -3, -56, -33, -19, -8, -10, -60, -5, -13, -12, -16, -4, -3, -24, -2, -10, -7, -33, -46, -10, -10, -7, -55, -4, -15, -4, -11, -21, -10, -34, -5, -8, -7, -52, -33, -14, -10, -9, -43, -13, -11, -13, -6, -2, -11, -22, -2, -3, -7, -33, -28, -11, -9, -6, -14, -3, -10, -11, -5, 1, -3, -33, -8, -11, -26, -28, -21, -7, -8, -10, -51, -6, -9, -7, -4, -13, -5, -18, -2, -8, -9, -47, -17, -6, -1, -10, -16, -4, -13, -6, -6, -23, -8, -21, -5, -3, -6, -30, -20, -7, -7, -6, -24, -6, -5, -9, -13, -8, -9, -18, -7, -7, -5, -27, -11, -7, -4, -5, -57, -7, -11, -7, -16, 0, -7, -19, -2, -8, -5, -38, -32, -10, -11, -9, -22, 2, -8, -8, -14, -13, -11, -40, -3, -2, -5, -43, -14, -6, -2, -2, -25, -10, -17, -5, -6, -14, -8, -18, -5, -10, -12, -32, -15, -13, -4, -10, -18, -5, -11, -13, -8, -21, -5, -18, -2, -7, -2, -34, -15, -8, -1, -7, -30, -6, -18, -9, -9, -8, -3, -20, 0, -9, -4, -35, -11, -11, -3, -8, -23, -4, -11, -9, -3, 2, -3, -18, -8, -7, -10, -31, -8, -5, -5, -7, -39, -4, -8, -10, -8, 6, -9, -26, -8, -7, -6, -21, -17, -11, -9, -7, -56, -5, -14, -4, -12, -8, -4, -31, -6, -12, -7, -26, -8, -4, -3, -3, -15, -3, -20, -9, -8, -9, -9, -19, -4, -11, -6, -26, -11, -11, -2, -2, -16, -3, -8, -11, -10, 10, -4, -24, -4, -8, -2, -32, -13, -16, -3, -13, -48, -1, -15, -8, -4, 9, -9, -14, -4, -8, -7, -28, -19, -11, -6, -3, -18, -1, -10, -11, -10, 4, -11, -22, 0, -8, -10, -29, -36, -10, -3, -8, -49, 2, -9, -8, -5, 2, -5, -14, -7, -4, -4, -39, -25, -8, -9, -7, -9, 1, -4, -16, -12, 5, -8, -20, -4, -6, -5, -37, -33, -4, -8, -12, -8, -2, -5, -7, -13, -7, -5, -12, 0, -8, -14, -30, -22, -11, -4, -5, -26, -4, -7, -10, -11, 4, -11, -18, -6, -3, -17, -41, -12, -12, -4, -3, -34, -4, -11, -9, -14, 0, -10, -12, -1, -7, -3, -26, -19, -10, -1, -2, -20, -7, -15, -10, -11, 4, -1, -22, 0, -6, -7, -26, -29, -13, -1, -6, -6, -4, -5, -11, -4, 23, -2, -27, -6, -7, -5, -30, -17, -14, -10, -8, -27, -9, -9, -10, -3, 3, -6, -17, -2, -12, -8, -37, -18, -13, -11, -6, -39, -10, -11, -10, -11, -13, -12, -27, -3, -15, -13, -37, -30, -14, -12, -9, -22, -5, -15, -4, -6, -3, -10, -26, -5, -6, -9, -40, -8, -16, -2, -4, -27, -4, -10, -9, -13, 7, -9, -15, 0, -7, -7, -36, -23, -11, -5, -7, -12, -6, -1, -9, -4, 8, -11, -19, -7, -9, -5, -33, -19, -7, -9, -10, -27, -6, -13, -4, -13, 3, -10, -18, -7, -6, -4, -25, -23, -12, -3, -4, -17, 0, -4, -8, 0, -1, -6, -15, -6, -7, -1, -27, -26, -6, -1, -7, -19, -8, -4, -5, -2, -10, -3, -18, -2, -3, -8, -31, -12, -11, -8, -2, -22, -3, -7, -6, -8, -2, -3, -11, -8, -6, -4, -25, -17, -11, -4, -7, -20, -7, -7, -6, -5, -4, -3, -21, 0, -1, -10, -46, -14, -13, -7, -6, -7, -8, -4, -3, -13, -13, -8, -20, -6, -4, -2, -31, -19, -11, -8, -3, -3, -4, -14, -8, -7, -14, -9, -35, -3, -8, -11, -53, -21, -12, -8, -4, -27, -2, -18, -9, -2, -9, -3, -16, -2, -7, -7, -48, -18, -7, -7, -2, -39, -4, -8, -9, -12, 0, -10, -18, -4, -3, -14, -37, -15, -13, -3, -2, -27, -3, -11, -10, -8, -12, -7, -19, -7, -8, -9, -31, -16, -11, -8, -2, -25, 5, -3, 16, 17, 51, -7, -5, 0, 8, -3, 2, 0, 35, -9, -3, -8, -10, -4, 11, -7, 54, -4, -14, -3, -3, -6, 33, -10, 35, -4, -5, 4, 9, -8, 36, 5, 67, 0, 33, 0, -7, 51, -42, -11, -10, -4, -6, 42, -3, -3, -7, -4, -20, -7, -75, -2, -8, -6, -16, -12, -6, -3, -4, 80, 1, -21, 
  6, 16, -15, 15, -13, 2, 20, 15, 15, 3, 5, 0, 2, 14, -6, -34, 20, -8, -7, 3, -3, 2, -31, -8, -26, -4, -5, -13, -8, -2, -14, -26, -9, -16, -12, 9, -18, 6, -13, 34, -6, 0, -33, -11, -14, 9, -27, -4, 9, -6, 20, 19, -1, 9, -1, 28, 2, 28, 4, 2, 27, -5, 3, -6, 7, -7, -12, 10, -38, 4, -1, 18, 2, -9, -1, -1, -17, 13, -11, -33, 4, -6, 6, 40, -6, 29, -29, 40, 14, 15, 6, 17, 29, 24, -25, -11, -5, -16, 4, 4, -14, 0, 9, -3, -11, 23, -24, 22, 7, 22, -19, 8, 22, 9, 7, 19, -14, -7, -9, 33, 22, 16, 12, 14, 50, 2, 3, 13, -3, 12, -5, 2, -32, 17, -15, 29, 10, -4, -3, 12, 5, 26, -34, 6, -2, 19, -38, -7, -18, -2, -5, 1, 27, 13, 4, 10, 8, 35, -1, -10, 33, 4, -2, 5, -3, -12, -12, 6, 2, 17, 25, -4, 16, -5, 1, 27, 16, 37, -5, -4, -19, -10, 14, 2, -1, 1, 11, -13, -36, 15, 19, 3, 3, -10, -19, 26, -12, 23, -14, 11, -9, 10, 17, 19, -4, 29, 21, -1, 21, -20, -3, 1, -3, 21, -3, 23, 0, 15, 11, 19, -3, 35, 15, 20, -4, -6, -11, 13, -8, 17, 11, -1, 16, -4, -11, 7, 8, 33, 9, -8, 11, -9, -15, -10, -6, -1, -14, -9, -2, -2, 13, 7, -10, 15, 20, -11, 1, 14, -14, 2, -17, 12, -11, -6, -5, 4, 17, -7, 47, 26, -31, -12, 2, 5, -14, -5, 7, 1, 21, 5, -20, -17, -3, 8, 0, -5, -5, 7, 3, -26, -2, 14, -21, 25, 14, 30, 24, 3, 5, 27, 5, 10, 12, 4, 11, 17, -18, 12, -1, 27, -10, 15, 15, 2, 25, 21, 9, -28, 6, -17, 3, -7, -24, -4, -17, -16, -12, -20, 12, -10, -19, -10, 21, 33, -18, -13, 7, -2, -34, 1, 16, 7, -6, -5, -7, 12, 0, 17, 1, 11, -8, -12, 10, -17, -9, 17, -5, 3, -8, 5, -5, -10, 11, -4, 4, 10, -5, -14, 19, -3, -19, 10, -7, 6, -19, -2, -7, 18, -7, -1, 1, 12, 0, -14, 13, 15, 7, 27, -7, 15, 3, 30, 10, 25, 10, 7, 18, -10, 12, 15, 12, 23, -45, 0, 4, 20, 16, 21, -4, 11, 19, 4, -28, 2, 28, 5, -24, -35, 6, -7, 14, 15, 12, -4, -9, -9, 5, 15, -8, 12, 39, -8, -5, 1, -32, 6, 17, 22, 35, 28, 1, -9, -15, 13, -5, 19, -11, -18, 1, 16, -21, 4, -2, 20, 16, 14, -4, 8, 4, 0, 9, -6, -4, -30, 8, -10, -22, 5, -23, -13, -10, 14, -7, -7, -12, -28, -32, 27, -10, -20, -10, -5, 0, -8, -25, 17, -35, 10, -25, 4, -5, -33, -10, 2, -20, -4, -5, 2, -22, -4, -12, 3, 4, 10, 9, 7, -8, 3, 9, 10, 22, -12, 18, -6, -28, 19, 1, 10, 3, 8, 3, 14, 21, 1, 9, 1, 35, 5, 12, 5, -17, -4, -14, 5, 4, 18, 18, 8, 8, 8, 4, 15, 15, -21, 12, 0, 9, 21, -8, 24, 0, 10, 25, 23, 12, 10, 32, 3, 2, 7, -5, -6, -5, 12, 6, 29, -24, 17, 22, 18, 10, 27, 31, -23, -25, -1, 1, 23, -26, -9, 1, 14, 22, 10, -19, -11, -4, 12, -4, -27, -14, -25, -23, -26, -14, -7, -3, 22, 7, 11, -7, -22, -8, -9, 3, -17, -10, -16, -8, 7, -9, 12, 17, 0, 9, -4, 1, 0, -21, -1, 1, -42, -14, 34, -13, 33, -19, 21, -11, 3, 31, -10, -2, 19, -4, 6, -2, -15, 6, -7, 5, 2, -21, 20, -19, -10, -18, 24, 19, 6, 14, -1, 8, 6, 13, -25, 5, 2, -22, 19, -18, -1, -20, 28, 2, 8, -10, -3, 5, 10, 8, -3, 6, 8, 6, 23, -41, -1, -26, 18, -11, 6, 4, -12, -13, -15, 6, -21, -2, -37, 6, -2, -23, 3, -15, 12, -4, -14, -13, -21, -18, 29, -16, -16, 9, 17, -14, 6, -1, 19, -32, 17, 7, 27, 3, 5, 27, 15, 3, 15, -6, 4, -26, -11, -12, 6, 25, 18, 4, -11, 11, 17, -11, 21, 17, -8, -3, 23, -21, 5, 14, 14, -1, 24, 1, -9, -16, 2, -16, -22, 11, 4, 4, -7, -10, 10, 8, 10, 19, 13, 18, 5, 9, 5, -25, -10, 6, -9, 2, 4, 3, 4, 3, -9, 1, 2, 9, 16, 15, -6, 18, -5, 16, -13, 11, 23, -22, 2, -2, -7, -7, -6, 4, 13, 4, -5, 6, -13, 6, -14, 15, 9, -4, 0, -11, -22, 32, 11, 9, -1, 0, 1, 1, -4, -2, -5, 14, -22, 7, 2, -12, 7, -14, 20, 4, -1, 20, 14, -13, -16, -8, -3, 15, -5, -18, 19, -26, 24, 15, 31, 23, 16, 1, 12, 13, -17, -27, -14, 1, 9, -16, 20, -11, 30, -18, 37, 14, 11, 14, 6, -2, -8, -19, -25, -5, 6, -19, -10, -15, -1, -11, 6, 5, -9, -5, -14, -1, 5, -8, 13, 1, 3, -18, 4, -20, 4, -16, 22, -2, 13, 4, 0, 3, 29, -6, -9, 3, 25, 14, 25, 2, 0, 20, 55, 1, 4, 16, -12, 1, 9, -1, -3, 1, 9, -16, 7, -26, 11, -12, 14, 5, 12, -3, 4, 11, -14, 2, 10, -10, -11, -41, 5, 4, 9, 7, 27, 7, 10, 12, 15, 5, 15, 16, 1, 11, 8, 6, 7, 0, 16, 10, 12, 15, 12, 4, 10, 21, 22, 0, 19, 4, 9, -22, 0, -1, 3, -20, 9, 0, 1, 17, 12, -4, -19, -13, 8, 7, -8, -55, -22, -7, 6, 5, -14, -23, 14, -10, 13, -5, -21, -5, -6, 12, -4, -35, 14, 19, 7, 8, 23, -4, -5, -10, 7, 1, 9, -15, -1, -6, 1, -35, 1, -18, -3, -1, 18, 0, 11, 12, -2, 15, 0, -10, 3, 16, -5, -14, 10, 2, 1, 4, -12, -4, 21, 4, 3, -2, 2, 18, 10, 14, 8, 3, 14, -8, 8, -21, 40, -2, 20, 12, 12, 27, 21, -12, -13, 13, -5, -15, 10, -20, 23, -25, 19, 5, 6, 9, -8, 22, 18, -9, 13, -4, -3, 11, -17, 6, 6, -16, 6, -16, -1, -20, -10, -11, -15, -11, 32, -3, -24, -19, 12, -6, 1, 11, 7, -1, -3, -2, -12, 10, -2, 6, 16, -1, 0, -29, 7, 4, 18, -8, 19, -19, 15, 12, 1, -4, 3, 0, -5, 1, -19, -9, 9, -14, 6, -1, 17, -2, -4, -1, -2, 4, 6, 18, -41, -2, -7, -24, 6, 27, 19, -8, 21, -2, 4, -11, -4, -2, 21, 13, 21, 21, 1, 35, 19, 6, 8, 26, 9, -3, -1, -12, -10, -2, -16, -28, 11, -10, -1, -35, 16, -14, 25, -27, 26, 7, -4, -21, 17, -22, 16, -11, -28, 19, 6, -1, 22, 19, 16, 19, 18, -10, 22, 10, 7, 11, 20, 21, 31, 34, 14, -11, 30, 3, 18, 36, 32, 16, 20, 19, 19, -24, 24, 31, 12, 7, -11, -5, 8, -4, 9, -4, -1, -7, 25, 31, -6, 19, 10, 48, -3, 10, 12, -20, 29, 6, 10, -15, 47, 16, 0, -10, 12, 7, -7, -15, -16, -5, -2, -13, 5, 1, 26, 16, 4, -20, -1, -14, -2, -1, -15, -6, -38, -10, -4, -1, -21, -11, -9, -22, 3, -19, -18, -17, -14, -12, 11, -17, -1, -18, -23, -32, 0, -19, 12, -2, 4, 9, -19, -3, -6, -7, 46, -6, -14, 14, -2, -50, -5, -10, 4, 6, -5, 11, 30, 16, 26, 14, 6, -19, -26, 25, 3, -56, 33, -20, 2, -6, 43, 29, 37, 21, 7, 19, -5, 0, -3, 10, -3, -38, 4, -25, -3, -14, -11, 15, 25, 11, 4, 34, 6, 7, -34, 25, 1, -42, 5, 8, -18, 7, -4, 0, 1, 7, -25, 6, -6, 18, -25, -4, 16, -16, -15, -6, -10, -19, 15, 6, -9, 5, -2, -18, 4, 5, -6, -7, -3, -27, -23, -9, 21, -6, -18, -20, -7, -8, 2, -10, -13, 2, -3, -11, -23, -7, 13, 11, 14, 17, 6, -9, -5, -20, 5, -7, 3, -34, -15, -6, 8, 9, 24, 13, 18, 10, 30, 7, 7, -4, 22, 26, 0, -9, 29, -8, 11, 11, 5, -2, 21, -14, 37, 19, 5, 12, 13, 29, 18, -9, 17, -18, 9, -11, 23, -2, 32, 19, 21, 8, 0, -2, -3, -7, -25, -17, 1, 11, 11, 13, 2, 13, 15, 16, 7, -7, -9, -22, -10, -14, -16, -24, 28, 14, 1, 15, 20, -4, 2, -7, 35, 9, 32, -5, -15, -5, -20, -11, 15, -8, 18, -23, -6, -35, 3, -20, 18, -10, -5, -11, -24, -14, 2, -13, -7, 2, -12, -34, 5, -32, 16, -19, 15, 23, 3, -9, -8, -11, -3, -11, -31, 18, 4, -15, 25, -8, 28, -14, 16, 7, 23, 8, 6, 24, 19, -6, -14, 12, 15, -61, -12, -42, 4, 9, 16, -7, 5, -2, -17, -2, -21, 4, -27, -3, -18, -16, 4, -17, 36, -13, 34, 14, 3, 11, -14, 6, 2, -39, -49, 17, -8, -45, 9, -13, 8, 9, 9, -8, -3, -17, -6, -21, -23, -19, -9, 22, -1, 2, 23, -2, 1, -15, 26, -15, 4, -7, 8, 5, 18, -9, 7, 
};
const TfArray<2, int> tensor_dimension5 = { 2, { 5,1600 } };
const TfArray<1, float> quant5_scale = { 1, { 0.01275276206433773, } };
const TfArray<1, int> quant5_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(8) int8_t tensor_data6[8*1*3*100] = { 
  /* [0][0][][] */ -16,47,35,12,15,38,82,87,127,-13,110,93,-1,99,1,-11,31,36,56,-10,47,80,68,89,102,101,8,31,13,1,32,86,72,52,74,46,14,19,33,-32,-6,1,13,4,21,36,46,23,44,30,13,-23,-7,34,34,28,6,-20,-22,-16,-17,-6,29,10,1,-32,-14,-14,-10,3,-29,27,33,1,-6,-11,17,15,-30,-35,7,29,32,58,86,78,48,36,14,-4,10,27,25,35,23,33,-6,5,38,101, 15,-18,-6,-18,5,3,-20,-17,6,17,-6,-29,10,-24,-77,-72,-35,-41,-45,-9,-72,-49,-12,12,27,29,-34,7,-69,-57,-65,7,-2,-2,-7,1,14,6,7,-17,-66,-83,-83,-75,4,32,-11,-23,-14,-20,-42,-45,-7,10,-10,-6,-51,-73,-62,-25,-25,-12,-31,-9,57,8,-35,-39,-89,-18,-34,4,11,-56,-17,21,16,-21,-32,-56,-27,22,38,1,4,-5,-18,-13,-16,-10,9,-6,-6,-12,-1,-28,5,11,45,79, 14,-79,-42,11,-2,-50,-21,-27,-65,-3,-53,-55,8,-67,-100,-123,-99,-108,-63,-5,-56,5,5,-4,-25,-1,8,-30,-27,-26,-63,-57,-17,-52,-39,-59,-42,-78,-65,-73,-62,-40,-16,-49,-52,-33,-6,-6,-11,-37,-53,11,24,-10,31,20,-5,-40,2,-35,-53,-44,23,7,6,-12,-18,-43,-42,-56,-55,-34,21,-30,-49,-21,15,15,-12,-42,-61,-21,10,12,-30,-17,6,-28,-33,-43,-50,-52,-93,-49,-59,-60,-37,-47,14,-9, 
  /* [1][0][][] */ 3,-104,-78,-11,5,-69,-103,-123,-104,13,-97,-80,17,-56,-39,-23,3,8,77,-4,56,34,13,-52,12,7,37,38,6,34,-68,-94,-81,-45,-44,18,27,-20,-13,-28,19,18,13,17,-5,41,45,24,51,48,12,-9,-86,-115,-96,-66,-47,-31,-2,21,1,8,-1,-36,-85,-63,-90,-76,-23,-46,-67,2,-25,-20,-57,-12,19,40,3,23,17,20,34,22,-12,-65,-15,-27,36,57,15,8,32,23,-13,11,10,29,56,31, -10,-73,-69,5,-1,-50,-91,-115,-68,-5,-94,-67,18,-60,-114,-111,-70,-71,37,-1,22,33,41,-37,-74,-80,-99,-102,-41,-53,-54,-39,-36,-21,-17,31,9,-19,-26,-26,0,0,13,-17,15,9,10,-11,7,-25,-13,-48,-10,-44,-67,-99,-22,18,-2,-35,-17,-23,-81,-117,-98,-69,-47,-107,-51,-97,-3,60,47,3,-6,-71,-77,-42,-12,8,51,7,-37,-30,-29,-41,-12,-1,-4,-16,-31,-12,-46,-14,-12,0,50,70,87,113, 15,-75,-50,5,-10,-79,-69,-69,-34,-3,-43,-114,14,-78,-102,-127,-18,4,76,-11,63,38,23,-64,-25,-28,2,20,20,27,-17,-4,-30,-16,-24,-21,-17,9,-9,-23,19,5,15,4,13,-9,5,18,-5,10,8,-13,-37,-47,-10,-12,-30,-29,7,-8,11,22,-29,-86,-78,-77,-107,-71,-63,-14,-4,-21,-48,-20,-7,-41,-72,31,36,-8,25,7,19,-13,-54,-41,-53,-10,-23,-7,-20,-5,-20,-55,-46,-27,12,87,71,44, 
  /* [2][0][][] */ 0,-16,-29,21,-23,-32,-46,-6,-83,-11,-75,-94,14,-109,-74,-88,-13,-21,-50,14,-59,-46,-55,-53,-36,-35,-41,-62,-21,-8,55,89,101,7,17,0,-21,-40,-25,-15,-4,-27,-22,-34,-11,37,17,58,40,25,43,-16,-5,24,62,-7,-37,-90,-59,-22,-65,-70,-100,-99,-99,-70,-88,-22,-51,-1,11,39,-3,6,-5,-4,17,41,28,18,14,27,78,38,37,18,-5,-53,-71,-57,-8,1,25,24,3,-21,-65,-50,-59,-44, 19,-16,-30,1,-18,-23,7,-4,-62,-20,-55,-66,22,-74,17,33,45,23,45,-22,49,-29,-8,-67,-47,-28,29,11,12,10,10,25,27,43,62,47,-6,6,9,22,72,38,38,9,14,20,-44,2,69,46,28,-8,-7,-2,-3,-39,22,0,-42,-49,-31,-60,-35,-64,-59,-106,-61,-10,-6,6,-7,-39,-22,5,-24,35,9,52,89,74,61,30,19,48,24,5,-7,-32,-77,-30,2,1,18,17,14,-34,-27,-5,-7,-37, 5,27,-25,3,-21,-24,-48,-46,-91,11,-73,-91,-22,-87,44,28,32,20,-17,12,-51,-81,-102,-83,-57,-51,17,-10,5,31,-32,5,3,-16,-51,-28,-22,-16,-17,-18,52,52,37,-27,24,42,31,36,85,17,-14,-1,16,23,10,44,14,-3,-21,-29,6,-38,-39,-60,-83,-53,-8,8,3,-11,-2,50,29,15,65,90,93,74,99,105,127,68,67,66,51,55,-30,-31,-30,-41,25,20,33,-12,5,-41,-28,-43,-37,-52, 
  /* [3][0][][] */ -21,37,-3,21,20,-13,-8,7,-6,7,5,-32,4,-15,-47,-80,-47,-52,-78,-10,-56,-29,-27,-41,52,35,68,67,72,94,62,51,47,60,63,81,31,66,46,41,57,102,104,68,48,32,17,-8,-9,7,-58,-16,-8,-25,-21,10,-12,15,20,9,66,80,58,22,17,10,-18,31,69,66,27,-28,-51,-4,31,34,-9,-19,-10,-51,-17,-62,-2,-34,-50,-50,-1,23,14,-21,-18,-38,-61,-62,-48,-88,-59,-36,-30,-23, 1,-33,2,-19,-12,14,-7,34,-47,-2,-49,-72,-12,-38,-42,-39,-76,-58,-47,20,-51,-38,-47,-29,29,33,45,68,73,78,36,49,25,48,36,-3,36,32,41,50,52,92,93,71,-12,13,-31,-49,-89,-55,-40,-37,-25,-5,-33,-13,13,-24,-3,-14,8,11,-16,9,-13,-36,16,72,37,6,-26,-25,-22,-40,-9,2,-35,32,-5,-49,-68,-68,-49,-16,-29,28,3,-8,8,5,-62,-83,-59,-62,-82,-88,-88,-62,-18,10, 12,-71,-32,18,20,-43,-26,-39,-71,-11,-58,-70,-18,-69,-70,-35,-60,-77,-127,11,-92,-89,-99,-38,-16,-37,1,-4,6,23,-9,5,9,-7,4,18,-35,14,-11,22,10,37,45,-2,-61,-26,-41,-37,-57,-61,-75,-74,-52,-82,-108,-59,-21,-38,-23,-35,6,4,-12,-26,-6,-45,-84,-42,12,-13,-32,-53,-78,-29,35,28,-16,-35,-43,-35,-85,-107,-62,-77,-38,-6,3,-15,-22,-45,-47,-76,-73,-19,-20,-42,-70,-26,-29,-57, 
  /* [4][0][][] */ 0,118,48,9,19,50,18,17,-79,4,-50,8,2,1,38,21,-63,-86,-57,-11,-48,11,17,-9,27,27,31,21,63,24,22,-52,-16,-22,-33,-7,18,6,-29,13,-46,-1,-19,-45,-83,-62,-62,-63,-2,-12,-17,-34,16,33,1,26,42,-16,26,87,47,13,-17,42,-2,53,46,83,114,116,90,56,33,36,24,-25,-8,-1,14,-31,-21,-45,-57,-83,-85,-127,-105,-109,-56,-14,9,-25,32,46,25,5,-18,-24,2,35, 9,113,85,-19,22,48,14,21,-56,-17,-91,-48,7,-45,12,24,-27,-29,-23,16,-22,33,40,32,-10,-6,11,35,32,67,29,-10,15,-10,12,6,-33,-11,-16,-31,-38,5,-15,-7,-52,-24,12,-32,-30,-21,-27,-42,15,52,-12,0,33,-20,19,13,42,9,-37,-8,-58,-16,30,56,48,93,50,62,48,19,34,-40,-77,-48,-79,-92,-25,-22,-75,-77,-101,-92,-100,-58,-23,-55,1,-13,28,35,36,12,3,28,30,64, -5,114,78,-6,22,80,43,38,-68,-21,-47,-89,6,-78,11,-4,-64,-43,-54,-15,-79,-35,-16,-14,20,11,69,34,64,86,42,-26,3,-21,-3,-13,-36,-25,-9,-18,-39,-29,2,-48,5,-1,-54,-10,-71,-74,-83,-11,-45,-9,2,-12,13,-18,-3,34,-1,8,-68,-14,-27,-25,18,11,32,50,15,21,13,4,-28,-34,-81,-41,-66,-90,-42,-32,-88,-99,-101,-79,-73,-63,-35,-23,34,28,21,21,52,28,51,32,61,69, 
  /* [5][0][][] */ 37,-33,-23,14,4,-53,-52,-58,6,-62,-31,-21,69,-34,-41,7,28,52,-38,52,-12,13,39,-29,-9,-50,58,-47,-37,18,54,21,-75,-18,-37,38,-14,-48,-50,-39,-54,-60,-78,47,-31,31,3,18,-73,43,-53,-89,-58,-64,-39,-33,12,-56,45,-76,-64,-87,-56,-68,-23,1,31,25,-56,55,21,49,-19,10,4,-13,-100,20,-22,-34,-51,-46,-81,-119,-48,-84,-8,6,4,-127,-61,24,6,21,-12,46,15,-60,29,1, -2,-76,-38,-31,47,12,5,-41,4,56,-59,-62,-67,-77,56,-78,-56,-20,-30,63,-34,-22,-61,36,-68,-27,-61,58,58,34,-40,-25,-52,55,50,-28,31,-27,-85,-65,4,-2,56,-46,-41,27,-83,-71,4,-77,-32,-19,-12,-43,-37,40,50,23,-65,38,-3,-16,-51,45,-37,31,8,-66,-54,-44,2,-85,-50,-3,-27,-114,19,17,-40,47,-46,-15,-60,-17,-104,-66,52,4,-18,29,-17,1,-88,32,-49,0,-45,-99,-75,-86, -65,-7,-86,-57,-72,-23,4,-107,-15,-72,36,31,-10,23,-2,-20,37,48,-38,-63,-64,-68,-86,-9,-66,7,-30,-18,3,-71,-83,-65,-69,-69,41,-69,19,47,-27,-53,17,25,43,-69,-72,-70,35,-87,-66,26,-17,-72,41,-9,53,-7,-42,32,-60,-56,35,-15,44,-38,-32,-20,20,-3,-57,18,-44,-85,-49,58,-50,-6,61,6,17,77,49,36,-25,-75,-4,7,7,-76,-8,9,-15,-56,-94,-33,-59,24,-70,-13,51,8, 
  /* [6][0][][] */ -15,-52,-38,-16,-4,-21,-32,-43,-110,17,-103,-43,4,-59,-28,-30,-20,-35,-55,-13,-63,-72,-71,-46,-43,-54,-3,9,47,17,11,-6,5,24,6,29,11,36,38,76,41,40,46,54,12,16,14,-41,-14,-4,7,9,18,19,-17,40,11,24,16,53,20,12,14,-5,-41,-24,-20,6,35,-3,-5,-32,-34,-21,-17,13,3,19,1,-1,-41,-26,-38,-53,-22,4,36,17,23,25,7,7,5,11,3,-5,-22,-8,-3,28, 16,0,-28,1,-19,-42,-11,-26,-19,-8,-39,-1,2,19,-15,-16,-26,-44,-62,9,-64,-66,-95,-58,-12,-6,-29,-14,1,-7,59,22,-3,40,31,7,8,56,34,60,57,36,49,60,28,-11,-1,-4,15,8,10,-17,-2,25,6,28,-6,5,5,10,1,-16,-25,-16,16,1,10,25,40,39,-13,-27,20,-1,17,-1,44,24,2,-18,-22,-4,-18,-58,-64,-34,-5,19,-5,-5,3,18,4,-5,7,31,-1,-2,22,-14, 9,-29,-36,18,10,-33,-40,-25,-68,-18,-42,-39,19,-21,-25,-23,-4,11,-56,5,-27,-127,-103,-49,-16,-27,-19,-20,-24,-2,25,45,26,37,28,31,50,79,61,93,64,28,45,38,45,16,3,-9,-9,-4,-9,-26,8,-8,-14,27,16,13,36,65,25,-12,19,4,2,-3,-22,14,33,-18,-23,-8,-42,1,7,33,-9,1,-2,10,-4,-34,-56,-40,-37,-38,-23,-13,-15,2,-14,7,-19,22,30,10,-20,-17,-19,27, 
  /* [7][0][][] */ -10,99,80,16,13,68,21,43,-41,14,-60,-56,9,-20,-63,-58,-18,4,33,-25,36,-4,25,99,117,109,48,40,45,44,-41,-62,-37,-71,-59,-38,11,-71,-44,-14,-11,-66,-70,-14,-81,-43,24,66,5,-39,-6,13,-73,-76,-30,-49,-6,-48,-39,-32,-14,4,95,-12,28,1,12,12,30,11,-51,-60,-8,-15,-51,-32,-1,54,8,-62,-42,-33,-39,-38,5,3,11,28,18,62,80,99,78,79,2,3,-17,-43,-68,-44, 3,98,42,-9,-12,66,58,51,-43,11,-36,-33,-18,-25,-73,-65,-45,-39,46,21,52,23,52,57,19,76,25,11,-5,19,-34,7,26,26,-12,-39,-56,-121,-118,-57,-10,-41,-37,-45,-48,-39,-10,30,30,-37,-44,21,-21,-19,-3,56,42,50,-20,-22,-37,10,77,26,7,13,-20,-37,-28,19,-41,-9,31,-15,-30,-30,38,-31,-24,-47,-18,12,-30,4,-17,49,27,23,61,91,118,107,105,95,56,27,-42,-21,-60,-33, 21,127,51,-10,26,64,25,9,0,6,-41,-82,16,-83,-79,-88,-25,-27,43,24,-8,-2,-26,40,92,48,31,36,70,47,4,-87,-69,-53,-59,-22,-23,-77,-75,-12,-52,-22,-7,10,-48,-97,-5,27,-18,41,-41,-13,-92,-41,38,41,101,26,-70,-12,-46,6,40,-15,-56,-10,-34,-13,34,-19,-22,20,3,-40,-22,-9,7,-10,-5,-43,-7,-51,-9,-20,39,-4,43,39,47,47,115,106,110,102,51,0,24,-24,-67,-47, 
};
const TfArray<4, int> tensor_dimension6 = { 4, { 8,1,3,100 } };
const TfArray<8, float> quant6_scale = { 8, { 0.0061012832447886467, 0.0070140552707016468, 0.0059074573218822479, 0.0063521931879222393, 0.0059733251109719276, 0.0018445682944729924, 0.0068076313473284245, 0.0045811180025339127, } };
const TfArray<8, int> quant6_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(8) int8_t tensor_data7[16*1*3*8] = { 
  /* [0][0][][] */ -45,-33,39,1,-46,-27,27,-92, -6,55,-8,-22,15,-29,-4,-127, 15,32,32,114,57,35,3,-119, 
  /* [1][0][][] */ -59,-46,-75,-6,-14,-22,101,-24, -3,40,-21,24,-70,33,-60,-3, -16,-3,62,-62,96,7,-127,-60, 
  /* [2][0][][] */ -11,-50,27,-38,8,17,-96,-67, 85,-60,22,72,38,-18,-127,-1, 11,-49,-41,-19,30,2,-46,-12, 
  /* [3][0][][] */ -104,-45,27,22,30,37,3,-4, -30,-99,7,120,127,40,41,0, -73,-106,37,25,45,29,5,-30, 
  /* [4][0][][] */ -38,10,76,-61,-22,-33,-93,2, -93,-123,-2,-55,-75,-62,-107,58, 127,-55,48,94,-79,49,-103,10, 
  /* [5][0][][] */ -31,-9,-127,19,73,30,10,42, -4,-46,-124,41,52,21,-38,-25, 12,-56,-94,-18,25,-2,-54,43, 
  /* [6][0][][] */ 21,7,-11,15,-10,8,-26,127, 24,0,50,-32,-2,30,-5,-47, -1,23,1,-15,-14,-26,9,-58, 
  /* [7][0][][] */ -25,-69,-31,127,-12,15,20,19, 4,-33,-4,104,110,8,9,-5, -31,-24,-61,60,61,11,-9,10, 
  /* [8][0][][] */ 0,-48,1,-61,-58,-9,-32,3, 0,-53,-41,-44,127,18,-12,1, 4,-68,44,-36,-7,0,57,4, 
  /* [9][0][][] */ -40,-11,12,16,102,44,-42,-111, -55,-60,86,31,28,-22,99,-95, -63,-127,54,115,77,-27,22,-108, 
  /* [10][0][][] */ -21,-62,127,-109,-96,-26,-36,-77, -19,-53,-12,-56,58,20,37,-77, -6,-34,-57,-104,-20,-2,-19,-66, 
  /* [11][0][][] */ -26,-63,-28,5,61,-63,-3,-17, -44,-91,-42,-54,-58,-12,-5,113, -18,-110,-127,121,-22,-65,67,13, 
  /* [12][0][][] */ -19,-74,-42,-69,-16,31,-23,-127, -3,-36,-43,-43,-20,-51,108,-23, -7,17,-27,-16,-62,24,-20,16, 
  /* [13][0][][] */ -6,-87,-19,50,-33,-41,-55,-25, -78,-82,3,-3,-17,-6,-61,-99, -39,-127,-8,32,-32,-1,3,-97, 
  /* [14][0][][] */ 6,-27,127,-35,-68,48,-31,-62, -21,-34,-50,-19,3,4,-71,-33, -33,39,57,-86,-65,19,-45,18, 
  /* [15][0][][] */ 118,31,-29,-44,-70,-38,-15,-60, -73,-41,-1,-72,0,29,22,-36, 85,-127,85,-26,-37,15,-52,79, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 16,1,3,8 } };
const TfArray<16, float> quant7_scale = { 16, { 0.0076595796272158623, 0.0044994615018367767, 0.0094660799950361252, 0.0056327497586607933, 0.005011590663343668, 0.0080219367519021034, 0.0077610206790268421, 0.0078279115259647369, 0.0078478110954165459, 0.0039249868132174015, 0.0060791093856096268, 0.004037143662571907, 0.0056733782403171062, 0.0085532423108816147, 0.0067253918386995792, 0.0060544144362211227, } };
const TfArray<16, int> quant7_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(8) int32_t tensor_data8[4] = { 1, 1, 400, 100, };
const TfArray<1, int> tensor_dimension8 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data9[4] = { 1, 400, 1, 8, };
const TfArray<1, int> tensor_dimension9 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data10[4] = { 1, 1, 200, 8, };
const TfArray<1, int> tensor_dimension10 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data11[4] = { 1, 200, 1, 16, };
const TfArray<1, int> tensor_dimension11 = { 1, { 4 } };
const TfArray<4, int> tensor_dimension12 = { 4, { 1,1,400,100 } };
const TfArray<1, float> quant12_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant12_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const TfArray<4, int> tensor_dimension13 = { 4, { 1,1,400,8 } };
const TfArray<1, float> quant13_scale = { 1, { 0.021979710087180138, } };
const TfArray<1, int> quant13_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const TfArray<4, int> tensor_dimension14 = { 4, { 1,400,1,8 } };
const TfArray<1, float> quant14_scale = { 1, { 0.021979710087180138, } };
const TfArray<1, int> quant14_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const TfArray<4, int> tensor_dimension15 = { 4, { 1,200,1,8 } };
const TfArray<1, float> quant15_scale = { 1, { 0.021979710087180138, } };
const TfArray<1, int> quant15_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const TfArray<4, int> tensor_dimension16 = { 4, { 1,1,200,8 } };
const TfArray<1, float> quant16_scale = { 1, { 0.021979710087180138, } };
const TfArray<1, int> quant16_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const TfArray<4, int> tensor_dimension17 = { 4, { 1,1,200,16 } };
const TfArray<1, float> quant17_scale = { 1, { 0.025530777871608734, } };
const TfArray<1, int> quant17_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const TfArray<4, int> tensor_dimension18 = { 4, { 1,200,1,16 } };
const TfArray<1, float> quant18_scale = { 1, { 0.025530777871608734, } };
const TfArray<1, int> quant18_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const TfArray<4, int> tensor_dimension19 = { 4, { 1,100,1,16 } };
const TfArray<1, float> quant19_scale = { 1, { 0.025530777871608734, } };
const TfArray<1, int> quant19_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const TfArray<2, int> tensor_dimension20 = { 2, { 1,1600 } };
const TfArray<1, float> quant20_scale = { 1, { 0.025530777871608734, } };
const TfArray<1, int> quant20_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const TfArray<2, int> tensor_dimension21 = { 2, { 1,5 } };
const TfArray<1, float> quant21_scale = { 1, { 1.2172553539276123, } };
const TfArray<1, int> quant21_zero = { 1, { 72 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const TfArray<2, int> tensor_dimension22 = { 2, { 1,5 } };
const TfArray<1, float> quant22_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant22_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,8 } };
const TfArray<1, int> outputs0 = { 1, { 12 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 12,6,2 } };
const TfArray<1, int> outputs1 = { 1, { 13 } };
const TfLiteReshapeParams opdata2 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs2 = { 2, { 13,9 } };
const TfArray<1, int> outputs2 = { 1, { 14 } };
const TfLitePoolParams opdata3 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs3 = { 1, { 14 } };
const TfArray<1, int> outputs3 = { 1, { 15 } };
const TfLiteReshapeParams opdata4 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs4 = { 2, { 15,10 } };
const TfArray<1, int> outputs4 = { 1, { 16 } };
const TfLiteConvParams opdata5 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 16,7,3 } };
const TfArray<1, int> outputs5 = { 1, { 17 } };
const TfLiteReshapeParams opdata6 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs6 = { 2, { 17,11 } };
const TfArray<1, int> outputs6 = { 1, { 18 } };
const TfLitePoolParams opdata7 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs7 = { 1, { 18 } };
const TfArray<1, int> outputs7 = { 1, { 19 } };
const TfLiteReshapeParams opdata8 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs8 = { 2, { 19,1 } };
const TfArray<1, int> outputs8 = { 1, { 20 } };
const TfLiteFullyConnectedParams opdata9 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs9 = { 3, { 20,5,4 } };
const TfArray<1, int> outputs9 = { 1, { 21 } };
const TfLiteSoftmaxParams opdata10 = { 1 };
const TfArray<1, int> inputs10 = { 1, { 21 } };
const TfArray<1, int> outputs10 = { 1, { 22 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 40000, (TfLiteIntArray*)&tensor_dimension0, 40000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 8, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 20, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 8000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 2400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension12, 40000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 40000, (TfLiteIntArray*)&tensor_dimension13, 3200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension14, 3200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 3200, (TfLiteIntArray*)&tensor_dimension15, 1600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension16, 1600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 3200, (TfLiteIntArray*)&tensor_dimension17, 3200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension18, 3200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 3200, (TfLiteIntArray*)&tensor_dimension19, 1600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension20, 1600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1600, (TfLiteIntArray*)&tensor_dimension21, 5, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension22, 5, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_SOFTMAX, },
};
static std::vector<void*> overflow_buffers;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers.push_back(ptr);
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static std::vector<scratch_buffer_t> scratch_buffers;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    return kTfLiteError;
  }

  scratch_buffers.push_back(b);

  *buffer_idx = scratch_buffers.size() - 1;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > static_cast<int>(scratch_buffers.size()) - 1) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
  return &tflTensors[tensor_idx];
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
  return &tflEvalTensors[tensor_idx];
}

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 23;
  for(size_t i = 0; i < 23; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflEvalTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    tflEvalTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
     tflEvalTensors[i].data.data =  start;
    }
    else{
       tflTensors[i].data.data = tensorData[i].data;
       tflEvalTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for(size_t i = 0; i < 11; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
    tflNodes[i].custom_initial_data = nullptr;
    tflNodes[i].custom_initial_data_size = 0;
    if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for(size_t i = 0; i < 11; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  22, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for(size_t i = 0; i < 11; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif
  scratch_buffers.clear();
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
    free(overflow_buffers[ix]);
  }
  overflow_buffers.clear();
  return kTfLiteOk;
}
