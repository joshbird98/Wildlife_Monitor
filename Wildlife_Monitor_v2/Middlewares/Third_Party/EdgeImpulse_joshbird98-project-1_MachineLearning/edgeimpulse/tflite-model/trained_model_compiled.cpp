/* Generated by Edge Impulse
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/
// Generated on: 01.01.2022 20:19:41

#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

constexpr int kTensorArenaSize = 41232;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[23];
TfLiteEvalTensor tflEvalTensors[23];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[11];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,20000 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0035386029630899429, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(8) int32_t tensor_data1[2] = { -1, 1600, };
const TfArray<1, int> tensor_dimension1 = { 1, { 2 } };
const ALIGN(16) int32_t tensor_data2[8] = { 10382, -7030, -7724, -10800, -7962, 3840, -9185, -6229, };
const TfArray<1, int> tensor_dimension2 = { 1, { 8 } };
const TfArray<8, float> quant2_scale = { 8, { 1.4069918506720569e-05, 6.6222496570844669e-06, 6.1334258134593256e-06, 1.5889767382759601e-05, 6.2726739997742698e-06, 1.6327710909536108e-05, 6.130568181106355e-06, 6.175696398713626e-06, } };
const TfArray<8, int> quant2_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int32_t tensor_data3[16] = { -7638, -5801, -1404, -3494, -5647, -2852, -1183, -1686, -3784, 1929, -90, -1222, 2119, -6297, -3128, 2972, };
const TfArray<1, int> tensor_dimension3 = { 1, { 16 } };
const TfArray<16, float> quant3_scale = { 16, { 1.9142502424074337e-05, 2.2384379917639308e-05, 3.6049488699063659e-05, 2.3564562070532702e-05, 2.0638201021938585e-05, 2.4108141587930731e-05, 3.6608820664696395e-05, 2.5178580472129397e-05, 2.3798716938472353e-05, 3.4409313229843974e-05, 4.2479947296669707e-05, 1.6170892195077613e-05, 2.7488495106808841e-05, 1.5653829905204475e-05, 2.6431818696437404e-05, 2.9592298233183101e-05, } };
const TfArray<16, int> quant3_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(8) int32_t tensor_data4[3] = { 5101, -4251, -3493, };
const TfArray<1, int> tensor_dimension4 = { 1, { 3 } };
const TfArray<1, float> quant4_scale = { 1, { 4.2458301322767511e-05, } };
const TfArray<1, int> quant4_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[3*1600] = { 
  13, 9, -48, 5, 45, -9, -21, -5, 44, -67, -26, 72, -98, 15, 0, 2, 37, 43, -44, -18, 49, -7, -14, -9, 23, -73, 22, 46, -91, 46, -25, 20, 38, 25, -16, -12, 24, 3, -30, -14, 82, -70, 35, 42, -77, 41, -28, 12, 17, -21, -18, -13, -6, -5, -10, -1, 6, -39, -24, 24, -86, 6, -10, 31, 7, 8, -49, -16, 3, -12, -10, -22, -27, -49, -10, 11, -58, -14, -34, 21, 0, 12, -6, -14, 18, -22, -21, -13, 29, -52, 11, 29, -19, 20, -9, -27, -19, -16, -15, 1, -20, -22, -13, 5, -28, -29, -66, 4, -27, 2, -19, -7, -22, -22, -13, -17, 5, -11, 6, 0, 11, -11, -61, -23, -18, 4, -7, -12, -17, -13, 14, 1, -17, -14, -2, 6, -20, -15, -30, -5, 35, -18, -4, -2, -11, 1, -14, 2, -5, -20, -16, -5, 4, 14, -56, 11, -17, -4, -15, -17, 0, 3, -1, -17, -1, 0, 1, -3, 26, -24, -57, 17, 8, 6, -5, -8, -11, -12, -3, -3, 4, -6, 4, -11, -29, -9, -7, -8, 2, -21, 1, 0, -32, -26, 4, -21, -46, 1, 10, 8, -62, 4, 38, -24, 15, -18, -9, 45, -46, -31, 13, 3, -46, -8, 5, -2, -24, 27, 62, -41, 24, -57, 10, 46, -45, -34, 19, -12, -48, -2, -14, 3, -73, 10, 71, -12, 26, -27, -11, 65, -37, -15, -5, -13, -9, -16, -21, -24, -36, 10, 40, -3, 13, -15, -9, 52, -16, -10, -8, -19, -16, -3, -2, -12, -1, 9, 58, 14, 19, -1, 0, 56, -16, -12, -24, -21, -2, -16, -9, 3, -36, -8, 59, -13, 10, -21, -4, 38, 0, -17, -66, -32, -29, -12, -58, -30, -15, -44, 86, 4, -32, -20, -8, 24, -20, -37, -69, -28, -57, -27, -40, -47, -35, -70, 112, -12, -68, -21, -39, 34, -49, -15, -73, -36, -46, -27, -29, -54, -91, -60, 77, -20, -50, -41, -28, 36, -31, -46, -39, -17, -42, -27, -17, -25, -41, -16, 69, -2, -21, -29, -16, 47, -9, -16, 5, -6, -35, -18, -8, -13, -18, 14, 32, -3, -2, -24, -16, 44, -18, -14, -2, -11, -60, -14, -6, 2, -16, 12, 80, -36, 16, -20, 3, 67, -43, -9, 8, -2, -55, -9, 24, 10, -5, 50, 20, -9, 40, -46, -5, 56, -17, -11, 7, -12, -11, -6, 9, 11, -67, 40, 24, -21, 10, -17, 7, 17, 7, -17, -13, -18, -17, -15, -24, -24, -12, -19, 27, 12, 4, 1, -19, 29, -6, -6, -10, -16, 0, -2, -10, -22, -6, -9, 0, 22, 3, 6, -4, 14, 18, 8, -21, -24, -3, -13, -19, -28, 30, -17, 52, 42, -33, -9, -19, 19, 13, -17, -74, -16, -23, -13, -29, -28, -14, -36, 51, 27, -51, 1, -32, 53, -2, -10, -18, -11, -8, -4, -15, -20, -17, -16, 28, -1, -30, -6, -2, 19, 12, 8, -22, -9, -13, -8, -19, -17, -4, 5, 62, 16, -10, 5, -7, 13, -3, -14, 4, 1, -4, -12, -21, -11, -5, 14, 58, 24, 25, -4, -3, 39, -2, -25, 5, -14, -20, -8, 8, -10, -24, 15, 36, 5, -5, 0, -4, 28, -14, -16, 3, 0, -46, -16, -1, -6, -17, -5, -9, 2, 0, -17, -1, 39, -26, 6, -11, -1, -21, -19, 7, 5, -55, -11, 28, -8, 10, -9, -15, 40, -28, -26, -24, -14, -14, 4, -1, 2, -29, -12, 73, -2, 9, -19, 2, 30, -36, -17, -19, -28, -5, -6, -16, 2, -48, -13, 51, 21, -10, -2, -5, 17, -13, -8, 0, -17, 7, -18, -15, -4, -5, 15, 33, 15, 26, -17, 5, 20, -6, -9, -4, -5, -10, -18, 2, -17, 19, 17, 22, 9, 25, -5, 1, 28, -7, -11, 15, -3, -11, -15, 2, -11, -1, -9, 34, 0, 25, -13, 0, 25, -18, -33, 55, 2, -24, 4, 18, 6, 5, 39, 61, -8, 24, 18, 1, 72, -12, -13, 38, 6, -20, -14, 5, 3, -53, 16, 50, 2, 34, -7, 8, 38, -3, -7, -29, -10, -36, -18, -18, -26, -30, -7, 99, -10, -40, -21, -2, 31, -29, -18, -7, -24, -19, -22, -18, -26, -17, -5, 67, -19, 0, -30, -1, 43, -5, -2, -1, -5, -13, -6, 1, -10, -32, 5, 16, -7, 1, -13, 4, 41, -6, -29, 3, -4, 0, -17, 7, -11, -22, 15, 45, -11, 18, -3, -13, 15, -7, -25, 1, -2, -24, 1, -16, -2, -28, -7, 40, -19, 30, -26, 5, 34, -23, -27, 12, -6, -20, -4, -3, -5, -36, 21, 7, 15, 27, -17, -10, 13, -27, -19, -6, -13, -6, 3, 11, -5, -16, 25, -15, -3, 26, -6, -6, 50, -21, -9, 1, -5, -26, -3, -7, -8, -71, -2, -2, 3, 1, 11, -15, -15, -2, -24, 19, -17, 6, 2, 6, -4, -7, 37, -8, 12, 28, -3, -3, 10, 0, -11, 42, -1, -20, 2, -3, 2, -1, 19, -11, 4, 36, -6, 9, 18, -3, -17, -39, -15, -1, -15, -40, -22, -11, -29, 41, -18, -14, -20, -15, -6, -1, -5, -80, -22, -5, -45, -47, -53, 2, -43, 34, 9, -64, 5, -36, -6, 9, 13, -46, -7, 29, -8, -33, -32, 12, -55, -25, 23, -53, 21, -9, -3, -5, -5, -9, -12, 9, -10, -5, 0, -9, 2, -60, -3, -10, 2, -12, -27, -29, -5, 35, -16, -30, 1, -4, 18, 1, -3, -8, -19, 24, -21, 3, 11, -35, -24, 36, -8, -27, -7, -1, 21, -45, 22, 12, -19, 30, -21, 15, 29, -40, -26, 5, -7, -38, -3, -1, 11, -58, 1, -2, -3, 34, -14, 7, 47, -16, -7, 4, -10, -26, -16, 6, -4, -35, 15, 37, 0, 5, -41, 0, 22, -22, -2, 14, -18, -12, -1, 8, 7, -50, -1, 36, -20, 32, -9, -5, 36, -21, -12, -4, 5, -20, 0, 9, -13, -12, 24, 70, -18, 23, -18, -10, 42, -26, -12, -1, 12, -6, -7, -12, 2, -5, 2, -29, -13, -3, -20, -9, 20, 3, 2, 5, 0, 16, 4, -15, -10, 10, 24, -25, 21, 6, -5, -7, 2, 11, 20, 39, 16, 21, 13, 14, 8, 28, 23, -11, 15, 41, 13, -6, 2, 19, 7, 8, -3, 4, 16, 8, -5, 13, 19, -46, 1, 23, -2, -4, 3, 3, 17, -16, -17, 14, -16, -15, -13, -26, -14, 5, 22, -39, 15, -10, -8, 6, 8, -66, -18, -8, -18, -37, -34, 39, -69, 71, 19, -73, 37, -36, 32, -12, -7, -114, -9, -6, -20, -26, -30, 17, -29, 74, 11, -32, -2, -23, 44, -14, 5, -1, 2, -8, -10, -14, -16, -18, 11, 35, 1, 10, 1, -8, 28, -16, -14, 21, 6, -10, -8, 5, 5, -20, 17, 17, -6, 5, 2, -2, 38, 9, -16, -7, -6, -26, -5, 6, 5, -10, 24, 0, 4, 8, 2, -7, 9, 9, -2, 16, -11, 10, 5, 0, 4, -5, 5, -34, 28, 29, -2, -6, 25, -2, -18, 27, -4, 9, 9, 15, 7, -11, 31, 6, 11, 22, -2, 6, -1, 9, -6, 59, -9, 6, -12, 24, 19, -6, 54, -32, 14, 18, -1, 16, 28, -8, -26, 35, -4, -19, 14, 18, 14, -23, 18, -21, 8, 32, -9, 5, -31, 5, -4, 23, 12, -17, 12, 12, 23, 18, 2, -31, -12, 16, 4, 1, 3, -2, 10, -4, 2, 3, -11, -1, -16, -34, -19, -5, 17, -40, 3, 2, -9, 0, -14, -31, -32, 10, -7, -28, -31, -34, -43, -14, 9, -18, -10, -17, -3, 2, -6, -16, -24, 3, -19, -25, -16, 3, -44, -32, 9, -42, -5, -19, -2, -9, -15, 23, -15, -29, -7, -1, 5, -3, -4, 12, 24, -3, -12, 1, 18, -6, -24, 24, 2, -18, -9, 14, 1, -35, 34, -13, 23, 20, -9, 8, 10, -26, -12, 27, -2, -17, -6, 8, -1, -55, 18, -17, -7, 13, 1, 1, 18, -11, -16, 10, -13, 3, -10, -5, 7, -29, 16, -3, -1, 0, -15, -1, 22, -19, -1, 26, -11, -42, 3, -9, 11, -18, 0, -7, -6, 2, -21, 4, 53, -16, -26, 16, -12, -35, -14, 9, 18, -35, 14, 20, -5, 15, -21, 4, 30, -16, -31, -3, -5, -45, -19, -8, -8, -90, 18, -13, -18, 15, -25, -1, 15, -35, -26, 11, -18, -48, 5, 4, 7, -34, 10, 10, -20, 28, -38, -11, 7, -34, -5, -16, -12, -29, -26, 5, 3, -69, -3, -8, -23, -12, -41, -15, 26, -21, -19, -24, -33, -21, -20, -9, -22, -46, -33, 30, 4, -23, -5, -18, 14, 9, -24, -34, -22, -29, -14, -6, -17, -47, -21, 8, 9, -6, -15, -3, 2, -23, -9, -72, -12, -31, -34, -23, -33, -53, -17, 78, -3, -65, -12, -28, 25, -35, -9, -76, -14, -38, -19, -45, -43, -49, -50, 117, -16, -29, -28, -31, 40, -3, -33, -58, -23, -34, -27, -26, -25, -27, -40, 65, -18, -24, -13, -24, 53, -16, -24, -8, 0, -18, -1, -13, -11, -13, -16, -1, 18, -22, -15, 6, 16, -14, -14, -5, -17, -13, -4, -16, -17, -6, 16, -24, -24, -9, -9, -10, 17, -2, -24, -7, -16, -15, -16, 8, -4, 17, 11, -6, -8, 2, -11, -5, 9, -13, -11, 5, -21, -5, -12, 5, -17, -30, 24, -17, -3, 35, -2, -15, 1, -3, -21, 1, -18, 0, -2, -22, 2, 9, -12, -25, 8, -4, -2, -9, -11, 
  19, 3, -4, -7, 3, -4, -9, -3, -12, 6, -17, 5, -25, 24, -13, -41, 4, 3, -23, 4, 7, 4, -23, -50, 19, -13, -29, 20, -50, 1, -10, -29, 14, 13, 1, 3, 21, 4, -4, -10, 3, -26, -25, -6, -43, 7, -11, -51, 18, 10, -17, 5, 16, -16, -4, -28, 7, -27, -56, 6, -45, 6, -20, -42, 18, 8, -9, -7, 36, -3, 2, -12, 29, -18, -20, 22, -25, 19, -11, -48, 30, 10, 17, 12, 13, 8, 16, 1, 26, -23, -64, 17, -16, 20, 1, -35, 26, 20, 11, 7, 22, 10, 20, 8, 22, 14, -62, 15, 11, 19, -2, -16, 19, 26, -12, 4, 32, -2, -16, -6, 8, 16, -53, 29, 1, 12, -5, -41, 36, 5, 1, 10, 22, 13, -16, 12, 45, -26, -50, 9, -16, 20, -12, -42, 1, 8, 12, 23, 7, 21, 19, 8, 32, -8, -42, 20, -9, 23, -6, -44, -1, 23, 11, 17, 8, 2, 18, -3, 4, 21, -43, -5, 2, 3, 17, -52, 13, -7, 22, 2, 1, 22, 13, 7, 29, 15, -40, 29, -23, 17, -6, -8, 14, 11, -4, 5, 9, 1, -5, 8, -4, -2, 31, 16, -2, -10, 2, -14, 4, -2, -19, 12, -11, -10, 12, -12, -4, 1, 2, 4, -37, 8, -1, -18, 19, 5, -4, 7, -5, -5, -3, 6, 12, -2, -16, 4, -19, -3, 4, -25, 6, 16, -5, 8, 9, 11, -18, 6, -15, 6, 4, 5, -21, 12, -14, -3, 21, 19, 6, 9, 13, 6, -14, -9, 17, -23, -7, 20, -20, 15, -21, -61, 28, 20, -21, 2, 34, -8, -1, -29, 20, -15, -3, 7, -17, 30, -5, -40, 24, 8, 25, -2, 28, 8, 27, -16, 10, -3, 21, 10, -15, 22, 10, -8, 15, 15, 15, 12, 22, 5, 11, 35, 21, 45, 13, 5, 12, 14, 9, 7, 2, 23, -2, 21, 11, 10, 13, 6, 39, 19, -15, -2, 9, 12, -9, -15, 18, 24, 24, 17, 21, 18, 17, 15, 6, 5, 31, 20, -10, 16, -4, 4, 34, 6, -7, -8, 30, 0, 14, -12, 30, -7, 57, 42, -33, 7, -1, -8, 41, 20, -1, 5, 33, 7, -9, -11, 15, -4, 10, 31, -30, 45, 2, -23, 29, 6, -6, 11, 16, 4, -11, -40, 36, -63, 6, 43, -95, 20, 0, -61, 28, 3, -9, 11, 27, -2, -4, -11, 38, -65, -8, 32, -62, 19, 4, -2, 16, 32, 17, 6, 7, -4, 5, 3, 31, 8, -32, -8, -11, 36, 1, -15, 18, -1, 11, 18, 26, 11, 6, -3, 24, -16, -15, 14, -16, 6, 5, -5, 4, 9, 6, 6, 12, 14, 14, 0, 8, 20, -10, 16, -33, 6, 3, -35, 19, 9, 9, -10, 26, -1, 2, -5, 28, 11, 5, 6, -16, 21, 1, -26, 14, 18, 25, -6, 19, 5, 23, 12, 9, 17, -35, -3, 15, 3, 1, -9, 1, 1, 10, 12, 6, 18, -1, 7, -23, 7, -29, -1, 37, -12, -1, -10, -15, -12, 9, -8, 4, 14, -3, -6, 1, 3, -22, -13, -11, -4, 7, -37, 10, 11, 2, -7, -2, -2, 9, 15, 6, -25, -29, 12, -5, -13, 7, 9, 19, 15, 10, 4, 23, -7, 13, -5, 15, 2, -34, -3, -10, 19, 7, -43, 5, 2, 5, 3, 2, 15, -6, 0, 31, 36, 1, -8, -5, 7, -3, -3, 11, 3, -7, 17, 15, 16, -8, -3, -22, 4, -44, 5, -22, 3, 1, 1, 13, 7, 12, 20, 10, 0, -2, -1, 26, 10, -28, 2, -5, 2, -4, -10, 1, -3, -14, 12, 11, -7, 0, 11, 15, 16, -8, 5, -6, 8, 5, -30, 9, -5, -10, 8, 8, 7, -21, -13, 1, -21, -6, 21, -43, 9, -8, -23, 9, -6, -1, -1, 3, 9, -4, -11, 12, -20, -14, 10, -32, 7, -9, -17, 30, 6, -7, 15, 38, -6, -7, -12, 5, 5, 39, 23, -13, 3, 1, -40, 15, 23, -7, -9, -2, -9, -8, -20, -4, -14, -15, 23, -31, -1, 2, -14, 5, 25, 7, 4, 14, -8, -6, -9, 6, -13, 5, 5, -10, 3, -8, -15, 20, 16, -6, 16, 13, 14, -10, -13, 19, 4, 20, 8, -3, 2, 1, -44, 11, 15, 2, -3, -3, 1, -1, -6, 23, 16, -2, 11, -5, 20, 5, 1, 15, 7, 4, -6, 8, 13, 7, -16, 4, 1, -14, 2, -17, -1, -14, -16, 3, -11, -4, 7, -5, -7, -10, -13, 10, 3, -13, 9, -21, 13, 6, 2, 7, 5, -18, -7, 18, 4, -18, -6, -14, -7, -3, 16, -35, 17, 3, -42, 30, 16, -21, -4, 10, 3, -4, -28, 22, -7, 16, 20, -42, 16, -8, -5, 9, 2, -8, 17, 18, 15, -9, -9, 26, -8, -13, 16, -43, 10, -16, -14, 29, 6, 5, 6, 22, -2, -2, -8, 28, 3, 9, 28, -22, 13, 1, -39, 28, 2, -5, -3, 42, 8, -1, -10, 10, -13, -4, 16, -42, 41, -18, -48, 29, 1, -25, -6, 10, 2, -7, -26, 36, -49, -13, 31, -52, 29, -22, -43, 32, -8, -7, -4, 19, -14, 7, -1, 28, 3, -22, 18, -15, 12, 5, -33, 5, 11, 5, -2, -4, -4, 9, 5, 2, 17, 76, 10, -1, 14, -3, 24, 12, -8, 3, 4, 15, 12, 13, -5, 7, 41, 76, -1, 26, 5, 6, 16, 20, 15, 2, 6, 24, -6, 8, 11, 7, 25, 7, 13, 22, 10, 0, 5, 17, 3, -15, 8, 6, 5, 8, 4, 9, 1, 6, 29, -12, 16, -7, -34, 9, 7, 13, 2, -1, 5, 1, 6, 22, -31, 2, 7, -26, 12, 6, -31, 19, -4, -8, -1, 8, -9, 4, 2, 11, 21, 14, 1, -16, 17, 12, -26, 11, 4, 0, 1, 0, 8, 0, -1, 10, -14, 9, 3, -7, 6, -14, -32, 22, 10, 7, 8, 7, 0, -25, 5, 30, -33, -46, 35, -72, 12, -21, -40, 28, 12, 3, -8, 20, -9, -15, -16, 10, -39, -22, 17, -22, 22, -3, -26, 25, -8, -26, -1, 14, -5, -17, -29, 8, -6, 4, 3, -56, 33, -9, -32, 8, -22, -11, 4, -1, 2, -14, -10, -27, -20, -23, 13, -62, -2, -16, -37, 3, -17, -26, -12, 14, -4, -17, -3, 10, -36, -29, 4, -11, 21, 4, -41, 12, -15, 11, -4, 11, -3, -9, -8, 14, -14, -15, -6, -51, 6, -9, 6, 14, -9, -1, 0, 4, -4, -7, 0, -11, -22, -42, 13, -33, 1, 8, -25, 22, -2, 22, 8, 14, -5, 13, -1, 0, -7, -51, 9, -12, 26, 1, -31, 23, -2, 18, 19, 6, 10, 21, -5, 13, -6, -49, 4, 2, 12, 6, -25, 15, 2, -9, 9, 13, 12, -8, 3, 9, 5, -53, 20, -9, 10, -6, -43, 5, 6, 4, 9, 34, 1, 35, 3, 14, 33, -69, 22, -4, 3, 6, -31, 18, 10, 8, 0, 8, 17, 28, 6, 25, 25, -22, 17, 24, 5, 5, -16, 11, 29, -6, 7, -3, 1, 15, -8, 36, -14, -55, 10, -20, 16, -9, -21, 25, 4, -8, 2, 34, 0, -24, -20, 14, -22, -24, 14, -28, 39, -5, -53, 29, 20, 6, 13, 31, -3, -22, -20, 59, -36, -31, 26, -39, 11, -26, -40, 10, -1, 1, 1, 22, -11, 9, -10, 5, -42, 3, 26, 15, 24, -14, -20, 4, -4, -17, 1, 14, -3, -22, -19, 9, 9, 36, 8, -15, 24, -13, -22, 1, 15, -4, -5, 7, -3, 18, -7, 10, -24, 54, 3, -23, 12, -11, -7, 12, 1, -26, 18, -3, 14, -3, -19, -10, -11, 39, 6, -13, 19, 7, 21, 6, 0, 12, 19, 8, 25, 21, 15, 13, 24, 44, 15, 4, 12, 8, 4, 23, 8, 18, 13, 4, 22, 9, 15, 16, 12, 14, 3, 2, 7, -2, 3, 23, 25, -18, -2, 22, -8, 2, -17, 64, -21, -45, 30, -27, 19, -6, -52, 27, 17, 6, 8, 35, 9, -12, -3, 44, -39, -36, 19, -32, 29, 0, -23, 33, 27, -11, 1, 18, -2, -18, -12, 23, -41, -25, 39, -15, 40, -5, -60, 31, 27, -4, 15, 15, 9, 18, -3, 21, -3, -21, 30, -19, 24, -6, -33, 34, 14, 10, 11, 23, 11, 13, -3, 29, 4, -26, 10, -29, 20, 16, -34, 23, 27, 20, -3, 29, -2, 21, 6, 23, 3, 4, 29, -4, 20, 8, -1, 31, 11, 16, 25, 13, 17, 31, 11, 63, 22, -3, 26, -26, 16, 6, -6, 5, 17, -5, -5, -4, -6, -5, -22, 24, 5, -1, 19, -66, -4, 5, -20, 6, 16, -34, -7, 1, -4, -35, -32, 10, -31, -19, 1, -44, 13, -1, -12, 9, -3, -4, 5, 0, -14, 16, -5, -5, 6, -16, 4, 2, 7, -9, 9, 13, 3, -16, 7, 13, -3, 8, -12, -14, 2, -3, -5, -29, -1, 5, -39, 4, 26, 4, 0, 20, -2, 12, -8, 28, 14, -33, 15, -32, 15, -13, -33, 12, 24, -13, -12, 31, -5, -13, -16, 21, -7, -35, -4, -19, 42, -14, -43, 9, 9, -15, 0, 11, 7, 1, -1, 7, -34, -25, 12, -35, 26, 0, -42, 7, 15, -28, 9, 1, 5, 13, -20, 17, -10, -23, 17, -37, -10, -17, -36, 27, 30, -10, 12, 17, -10, -6, -3, 46, -5, -42, 27, -42, 41, -14, -32, 32, 2, 12, 10, 12, -6, 4, -10, 33, -11, -15, 45, -32, 33, -6, -22, 
  -31, -23, 32, 20, -9, 26, 47, 20, -11, 57, 29, -68, 115, -26, 19, 26, -51, -2, 65, 19, -15, 10, 39, 51, -46, 114, -12, -49, 127, -32, 48, 4, -34, -17, 39, 9, -31, 15, 27, 50, -67, 97, -6, -31, 101, -37, 29, 33, -38, -7, 30, 15, -31, 18, 24, 41, -20, 88, 50, -46, 78, -22, 32, 3, -6, 16, 44, 25, -28, 28, 16, 30, -30, 67, 29, -46, 74, -16, 21, 27, -19, -8, -4, -3, -10, 6, 11, 25, -49, 44, 33, -30, 41, -24, 27, 38, -17, 5, 15, 5, -2, 19, 3, 7, 2, 36, 75, -14, 52, -6, 8, 22, -26, -7, 6, 14, -24, 20, 15, 25, -32, 25, 68, -5, 26, -4, 17, 38, -22, 6, -7, -5, -11, 15, -3, 8, -26, 31, 78, -6, 0, -14, 2, 36, -7, -8, -11, -13, -1, 0, 8, 15, -6, 6, 67, -14, 11, -15, 12, 70, -13, -12, 8, -3, -32, 12, -1, 5, -6, 9, 78, 4, 20, -10, 16, 48, -2, -8, -23, 3, 3, -5, -24, 0, -16, 6, 14, -26, 30, -9, -2, 7, 21, 18, -5, 9, 7, 3, 12, 6, 18, 2, -52, 7, -23, 17, 14, -28, 15, 31, 17, 4, 24, 18, 4, 16, 7, -33, -58, 9, -1, 15, 2, -35, 13, 1, -4, 18, 24, 12, 12, 29, 8, -25, -65, 40, -10, 6, -3, -37, 14, 4, 11, 11, 15, 22, 28, 5, 30, -14, -45, -16, -3, 6, 22, -35, -6, 0, 22, 28, -15, 30, 25, 39, 4, 14, -33, -11, 19, -8, 10, 1, -17, 0, 36, 23, -17, 14, 15, 27, -9, 12, -39, -16, 25, -3, 16, -9, -11, -2, 35, 15, -3, 7, 21, 42, -21, 34, -88, -15, 25, -14, 11, -12, -12, 23, 54, 39, 19, 34, 65, 48, 8, 59, -123, -18, 49, -6, 26, -32, 20, 19, 42, 12, -10, 13, 23, 49, 15, 54, -65, -6, 48, 10, 16, -24, -10, 3, 13, 4, 5, 17, 20, 33, 4, 45, -83, -27, 38, -16, 28, -28, -24, 11, 11, 28, -2, 32, 7, 5, -22, -13, -48, -14, 5, -4, 8, -28, -13, 13, 10, 3, 5, 5, 5, 10, -10, -15, -68, -14, 40, -19, 17, -38, -2, 0, 21, 27, -4, 1, 5, 13, -25, 17, -17, -20, 26, 18, 13, -16, 9, 5, 27, 22, -22, 9, 26, 3, 0, -3, -33, -33, 28, 1, -3, -21, -30, 8, 5, 0, -16, 9, 16, 13, -25, -2, -16, -20, 12, -12, 11, -7, -6, -5, 2, 18, -27, 10, -11, 15, -20, 3, 8, -24, 33, -12, 6, -2, -10, -16, 4, 12, -18, 4, 2, 22, -10, 2, -57, -44, 40, 5, -12, 0, -6, 6, 55, 14, -24, 9, 34, 53, -14, 41, -63, -36, 53, -3, 12, -24, -16, 6, -2, -3, -11, 7, 1, 22, -3, 1, -20, -6, 29, -7, 12, -14, -13, -2, 5, 13, -2, 10, 17, 1, 12, 9, -21, -5, -32, 9, -1, -6, 11, 24, 6, 18, 33, 7, 22, 13, 8, 16, -56, -6, -6, 14, -5, -9, 12, -10, -7, 5, 12, 23, -8, 9, 7, -7, -49, -16, 8, 24, -2, -29, 3, -13, 8, 0, -9, 3, 16, 1, -15, 23, 14, 2, -5, -14, 5, 16, -10, -15, -10, 11, 5, 0, -2, -11, -5, -4, -32, 5, -20, 0, 17, -11, -1, 8, 20, 22, -11, -5, 11, -2, 30, -6, -45, -20, -11, -7, 12, -13, -5, 7, 5, 1, 19, 11, 7, 17, -3, 8, -28, -8, 23, -25, 3, 14, 7, 6, 12, 16, -2, -1, 5, 13, -25, -23, -4, -14, -22, -13, 8, -9, -9, 18, 28, 18, 0, 30, 23, 28, -2, -8, -15, -22, 16, -6, 8, -4, 0, -6, 7, -7, 10, 16, 21, 29, -10, 11, -29, -16, 9, -3, 24, -9, -9, -8, -25, -10, -9, 0, -5, -1, 4, -25, -51, -16, 2, -8, -8, -45, -3, -2, -25, -4, 15, 12, -5, -7, 10, -13, -46, -18, 11, 13, 10, 4, -15, -4, 21, 1, -8, 16, 33, 40, 3, -3, -88, 22, 44, -7, 34, -18, 14, -2, 15, 12, -2, 13, 48, 25, 18, 21, -61, 5, 20, 12, 20, -32, 1, -7, -8, 0, 12, 12, 11, 5, -16, 5, -36, -17, 3, 0, 18, -34, -3, 21, -8, 20, 9, 4, -2, 11, -1, -7, -38, 12, 11, 1, -2, -21, 16, 19, 0, 23, 32, 11, 21, 7, 20, -4, -51, -7, -8, 14, 10, -15, -14, 2, -13, 19, -5, 21, 15, 30, 9, 18, 2, -7, 7, 2, 25, 10, -12, 5, 2, 2, -27, 4, 24, 17, -45, 14, -3, -13, 25, -31, 25, -40, -2, -9, -5, -2, -2, 10, -4, 25, -8, 15, 8, -31, 35, -6, 12, 33, -29, -1, 7, 0, -7, 7, 23, 15, -32, -17, 6, -37, 16, -10, 24, 28, -15, -18, -16, 0, -17, 18, 1, 25, -28, -4, 8, -31, 31, -29, 1, 28, -23, -10, 68, 31, -16, 34, 66, 54, -25, 62, -29, -28, 75, -12, 27, 28, -8, -11, 90, 19, -15, 45, 74, 82, -29, 55, -16, -20, 99, -25, 32, 3, -17, -14, 42, 23, -3, 11, 26, 56, -15, 69, -8, -8, 45, -26, 38, -7, -1, 10, -6, 6, -8, -3, -16, 14, -17, -13, 25, 8, -13, 1, 3, 13, 2, 2, -3, 4, 6, 15, -24, -14, 3, -5, 11, -3, -16, -15, 7, 2, 6, 18, 0, -2, 20, 21, -7, -2, 11, -14, -5, -13, -17, -3, 2, 13, 5, -5, -3, -4, -3, 24, 1, 9, 16, 14, -3, -5, -9, -7, 3, -15, 5, 15, 4, 7, 15, 5, -6, 8, 9, -26, -51, -9, -9, 12, 10, -4, 6, -6, 16, -1, 13, 2, 15, 17, 8, -8, -51, -15, 6, -14, 20, 4, -19, -3, 4, 17, -8, 15, 9, 32, -15, 3, -35, -26, 29, -16, 17, -16, -21, -4, -5, 11, -29, 16, 21, 19, -16, 16, 15, -1, 29, -31, 7, -2, -19, -11, 32, 11, -18, 19, 16, 20, -12, 2, 13, -7, 24, -18, 14, 12, -9, 13, 13, 8, -12, -1, -5, 25, -2, 11, 36, -39, 23, -8, 0, 42, 2, -8, 4, 7, -8, -4, 9, 2, 0, 2, 40, -33, 24, -7, 13, 23, -17, -4, 17, 18, -12, 11, 36, 32, 3, 36, -12, -10, 53, -20, 27, 7, -3, -4, 42, 20, -16, 38, 66, 42, -26, 81, -59, -14, 62, -11, 38, -12, -21, 9, 45, 21, -10, 13, 15, 22, -13, 26, -44, -13, 47, -18, 32, -23, -22, 4, 6, 5, -25, 17, -14, 19, 7, -19, -19, -7, -6, -1, -5, -3, 7, -15, -4, -7, -15, -2, -14, -9, -13, -8, 4, -28, -2, -8, -6, 5, -8, 9, 9, 12, -6, -10, -35, 4, -21, -32, 13, -32, -5, 5, -2, 19, -4, 0, -24, 7, -12, 9, -48, -9, -21, -11, 35, -31, -23, 4, 2, -13, -19, -12, -5, -20, 2, 12, -30, -8, -28, -26, 19, -30, -3, -19, -8, 13, -6, 12, -17, 13, -36, 18, -15, 4, -29, -29, 44, -39, 13, -23, 17, 25, -16, -18, -23, -2, -6, 1, -7, -5, -56, -8, 13, -43, 14, -17, 7, 65, -26, 16, -4, -4, -8, 3, -6, 0, 2, 7, 32, -12, -4, -16, 10, 20, 3, 3, 28, 4, 10, 14, 19, 25, 12, 3, -9, -23, 48, -15, 14, 28, -15, -6, 22, 14, 2, 28, 46, 28, -8, 67, -11, -7, 50, 0, 25, 24, -8, 8, 41, 12, -6, -2, 6, 35, 20, 50, 16, -18, 61, -12, 23, -25, 2, 10, -13, -13, 9, 0, -36, -6, -3, -19, -37, -29, -28, 11, -14, -11, -25, -14, -27, 2, -11, -13, -20, -32, 14, -26, -6, -42, -6, 0, -7, 1, -7, 0, 0, -16, -19, 6, 9, 0, -43, 1, 12, -56, 40, -6, 4, 22, -10, -13, 12, 2, -23, 8, 9, 8, -54, 4, 13, -26, 1, -11, 3, 13, -20, -20, 12, 6, 1, 0, 6, 13, -3, 32, 25, -30, 23, -26, 6, -2, -25, 3, -2, -15, -23, 10, -18, 17, -11, 11, -21, -35, 20, 2, 10, -9, 2, 7, -20, 1, -2, 6, -18, -3, 18, -20, 1, -9, 7, -6, 8, 9, 9, 6, 1, -4, 8, -3, -18, -1, -5, -13, 7, -25, -16, -5, 0, 0, 7, -1, -11, -5, 8, 6, -26, 15, -22, 3, 16, 3, 30, -14, 4, -1, -1, 1, 13, 20, 0, 19, 4, 35, -4, 25, -20, -4, 70, 17, 28, 16, 3, -13, 52, 24, -7, 14, 57, 39, 22, 69, 2, -24, 21, -7, 17, 9, 24, 12, 66, 27, 27, 19, 20, 28, 9, 34, -72, -4, 82, 33, 14, 2, 5, 4, 60, 8, 4, 16, 55, 66, 17, 36, -105, 16, 50, 28, 30, -9, 0, 5, 45, 8, 4, 25, 26, 27, -37, 22, -48, -15, 53, -15, 31, -15, -2, -16, 20, -1, -14, 22, 17, 29, 1, 12, 19, -8, 57, -21, 25, 30, -5, -9, 6, 9, 6, 10, 10, 8, -9, 4, 29, -11, 17, -4, -6, 31, 0, 6, 13, 25, 10, 3, -1, 16, -7, 9, 11, -19, 18, 9, 16, 14, -15, -12, 28, 17, -29, 13, 29, 29, -26, 0, 16, -28, -3, -14, 27, 38, -7, -3, 11, 13, -15, 3, 0, 29, -8, 24, 25, -30, 31, -30, 14, 23, 
};
const TfArray<2, int> tensor_dimension5 = { 2, { 3,1600 } };
const TfArray<1, float> quant5_scale = { 1, { 0.004790967795997858, } };
const TfArray<1, int> quant5_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int8_t tensor_data6[8*1*3*50] = { 
  /* [0][0][][] */ -15,24,-25,27,79,-37,8,8,27,10,29,82,62,71,10,14,18,-25,16,46,38,97,38,33,73,73,-33,12,19,-16,-27,1,-26,-2,22,-27,-76,-57,-40,-92,-25,-78,-37,-74,-69,-19,19,-63,-23,-59, 97,35,18,-2,21,47,-4,-32,19,34,15,26,64,-2,4,-10,-20,-48,47,86,67,127,82,1,17,2,-7,10,-19,-11,18,-29,-11,30,28,-33,-1,-19,-50,-62,-78,-78,-55,-25,-66,-34,-60,-62,-59,-4, 90,69,58,-14,50,28,-34,-38,8,89,9,50,81,28,4,43,68,-5,71,59,73,45,79,34,56,55,-33,49,-34,-7,-38,10,-10,-16,-39,-28,-49,-43,-50,-13,-57,-117,-93,-81,-62,-46,14,-24,-28,-39, 
  /* [1][0][][] */ -29,-47,-86,-96,-16,-26,-18,-117,-49,33,-12,-118,55,5,-53,34,-33,0,12,-39,-97,27,-75,-98,49,25,-22,-14,-74,74,-34,-57,15,-56,-52,-66,-1,-12,26,22,-41,24,0,28,-59,54,54,-78,58,57, -53,24,-127,-125,-70,-104,-34,29,-66,-74,-3,40,52,14,49,-3,-55,-85,-58,-5,-72,60,33,11,-67,52,-100,38,79,91,-108,-14,11,79,38,-97,-23,-82,74,54,-33,-12,85,21,-66,53,-30,-105,-75,-113, -78,-98,-105,-8,-41,-10,21,-104,19,-63,-116,-7,59,30,-23,-3,41,38,37,-33,-41,-54,-12,-29,67,36,-48,-58,-2,-67,-103,-65,-49,-51,-30,81,62,97,72,64,-87,-78,-11,-39,83,-34,30,14,-11,-61, 
  /* [2][0][][] */ -3,-84,-70,98,-97,-106,-123,63,-61,-54,0,98,58,24,-38,-127,11,-21,-46,41,-80,-4,-51,33,-60,-55,-16,-115,-101,-40,-101,-2,58,-94,-47,38,-30,-64,8,-35,-91,-85,-60,30,-69,67,-55,-111,-59,-83, 47,-83,41,-40,20,-79,41,-55,-99,21,-65,-68,-93,-18,-13,-10,-97,64,0,-38,-41,12,-4,-51,-16,-92,79,39,-51,-24,-113,-115,69,-27,51,-89,74,27,-63,-119,8,-55,27,53,-10,-70,-88,3,-61,-55, 69,-61,-56,-21,-91,-16,73,6,-81,-107,-37,25,93,-22,-26,54,-1,-99,69,-126,82,-67,33,26,-12,76,74,-11,-8,-15,0,-103,-94,-58,31,47,45,22,32,-68,46,-5,-5,28,-8,13,-121,-120,-4,62, 
  /* [3][0][][] */ 67,127,81,108,96,-46,-16,8,-6,2,-8,5,0,15,28,-48,-17,-21,-69,-46,-27,10,10,-45,26,4,5,2,-6,23,7,-2,-21,-37,-27,1,-20,35,-12,-41,-30,-6,5,-40,24,45,44,28,12,73, 19,85,52,19,24,24,-18,4,-11,-49,-31,23,11,-75,-25,-25,-49,-35,-41,-26,-14,-60,-78,5,-16,-6,-32,-31,42,-32,2,-35,14,-47,0,-12,28,11,1,-27,-13,19,27,-1,22,-22,44,35,35,72, 108,76,61,27,24,-23,-54,13,-27,-16,-48,-34,-36,-1,9,5,-77,-38,-13,5,-16,-25,-51,-21,7,30,-2,42,26,21,-18,23,-34,10,-9,-38,40,-16,-5,8,0,19,29,26,-21,31,-25,21,-1,9, 
  /* [4][0][][] */ -23,15,-96,16,61,-86,-6,-8,-124,-12,2,47,-25,16,-28,-105,4,-96,-42,-74,-7,-41,-8,-103,9,10,-31,-73,79,-102,-27,-93,71,-59,-112,-106,75,85,-79,34,-67,36,-49,-34,34,6,-118,-86,-19,-31, -2,-115,-112,-49,-116,-60,73,-95,-77,52,-39,-113,-87,66,14,65,-97,24,3,-13,67,54,-59,-23,73,-17,47,-111,22,-36,-69,-50,74,24,47,-69,-105,-57,18,14,44,-70,54,-3,-49,-92,-96,-29,7,23, 21,-48,77,-109,79,-88,-2,33,48,-102,-127,-38,2,-24,7,61,37,29,29,49,29,-40,-3,67,5,22,-53,62,-94,67,3,-49,67,-87,15,52,69,10,-13,2,48,60,-32,24,-28,29,44,-14,14,-61, 
  /* [5][0][][] */ -80,-85,-81,-68,-53,-29,-33,-20,-9,-66,-39,-43,12,-9,-34,15,51,88,32,59,25,16,49,10,4,-29,39,-10,-19,23,44,25,-13,20,9,37,-8,-25,-18,-13,-11,-11,-28,45,3,20,-13,-13,-64,-5, -106,-127,-110,-112,-72,-41,-16,-44,1,-72,-80,-91,-60,-41,-24,5,53,79,31,69,49,46,30,40,21,7,-45,38,4,9,7,19,14,-8,31,-2,19,26,33,-37,8,50,27,39,18,35,1,-49,-3,-29, -95,-97,-77,-97,-38,4,-3,-8,-2,-4,-52,-67,-67,-39,18,-38,9,53,42,63,26,9,5,43,-33,-22,-34,38,23,22,-12,0,-1,57,53,-2,15,-18,-43,-31,18,19,42,-9,-4,17,-62,-63,-24,-71, 
  /* [6][0][][] */ -98,-83,-124,-110,-47,-39,80,29,-105,67,-44,27,-2,-49,15,3,27,-46,-28,-98,-76,-18,-14,47,-51,-112,-113,-50,67,-92,-127,-109,-45,67,-32,71,-10,-108,-97,53,-43,-77,-46,45,-38,7,-68,-125,-33,-40, -9,-5,-43,-20,-116,77,-82,6,-120,96,24,47,72,21,-115,-76,-100,-75,32,-57,-2,-73,-91,-113,-32,19,-11,55,-42,16,-90,52,19,-24,-10,-59,64,13,19,48,3,6,-35,-9,-35,-12,-100,-90,-33,42, 54,-29,-48,-21,-124,-116,50,-30,68,-67,-41,-64,-17,38,53,49,40,-51,36,17,23,43,-109,-125,-16,12,-104,-25,-71,-110,51,41,-94,-18,-66,-120,-39,35,-86,-96,-80,-59,6,65,20,-15,52,54,74,10, 
  /* [7][0][][] */ -60,-91,-54,32,23,-95,-56,20,-41,37,-96,-36,18,81,-27,-5,-83,-7,50,-114,62,-36,71,78,82,55,-74,-103,66,56,-102,-66,22,-95,-54,-81,84,-72,26,8,-27,-33,-47,36,-123,-17,45,41,53,-41, -57,0,-91,-66,34,-123,4,-29,11,-101,-26,-59,83,-86,85,62,50,-61,66,84,23,-3,10,53,-112,-100,-106,68,31,-97,-116,-118,-110,-59,31,-12,45,58,-109,-10,-127,-50,-40,30,-67,26,-24,-15,-67,-44, -10,65,-43,-53,-48,56,73,35,-99,37,-77,-49,-74,-23,6,38,-110,-85,-14,60,7,-52,53,6,-116,86,-23,-68,-21,53,-62,2,72,86,-50,19,-4,-84,-75,-22,-25,-37,-18,30,-112,-54,-35,-92,26,-63, 
};
const TfArray<4, int> tensor_dimension6 = { 4, { 8,1,3,50 } };
const TfArray<8, float> quant6_scale = { 8, { 0.0039761224761605263, 0.0018714305479079485, 0.0017332901479676366, 0.0044904071837663651, 0.0017726413207128644, 0.0046141687780618668, 0.0017324825748801231, 0.001745235756970942, } };
const TfArray<8, int> quant6_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[16*1*3*8] = { 
  /* [0][0][][] */ -96,-43,-62,126,-26,-102,68,-67, -15,-31,-103,-3,-47,-127,35,-62, -36,-72,88,90,16,56,58,-10, 
  /* [1][0][][] */ -105,55,-63,-10,6,-21,46,25, -106,-66,-27,24,-49,55,-4,-22, 15,57,34,127,63,5,-66,6, 
  /* [2][0][][] */ -70,29,-34,-43,7,127,-41,-62, 7,-11,-7,26,24,45,-35,31, -25,-45,-17,-44,12,85,15,-5, 
  /* [3][0][][] */ -52,21,-3,-2,-37,127,-40,71, -60,-21,10,68,47,123,61,-20, -20,-79,31,1,-50,111,55,-48, 
  /* [4][0][][] */ -53,22,64,16,57,-69,-41,40, -105,-17,2,0,-40,-68,29,78, -22,-86,64,127,-47,71,-68,72, 
  /* [5][0][][] */ 20,-35,-72,32,48,127,2,70, -75,-48,-81,29,24,123,-55,-60, -49,6,26,-11,44,55,-50,36, 
  /* [6][0][][] */ 3,0,16,28,4,94,-30,34, -20,-11,25,-44,-4,127,-20,-55, -74,29,1,-35,28,46,-15,-15, 
  /* [7][0][][] */ -58,-59,51,-31,-43,127,51,21, -11,-77,-55,-10,64,97,42,-92, -76,-77,-59,-18,35,68,-45,59, 
  /* [8][0][][] */ -70,-43,57,12,-29,-31,10,63, -13,-27,-67,127,68,14,34,35, -9,-61,34,-40,-7,-61,66,18, 
  /* [9][0][][] */ 3,-54,9,-29,36,127,-64,-25, 1,47,50,-57,14,101,59,-34, -33,-10,38,-15,5,59,21,10, 
  /* [10][0][][] */ 49,1,35,-32,-2,-33,-30,9, 127,6,3,1,39,-13,39,-37, 67,-5,-6,-36,-22,-42,37,-15, 
  /* [11][0][][] */ -15,-96,-17,102,-44,-95,53,-3, -32,71,67,-26,-79,-28,2,116, 33,5,-104,127,93,-109,76,10, 
  /* [12][0][][] */ 11,-6,-62,-30,33,127,21,-74, -36,-12,75,-22,37,20,35,27, -23,17,-43,-38,-16,113,-4,42, 
  /* [13][0][][] */ -41,11,-103,117,-113,-119,-43,-90, -104,-66,19,-31,62,-40,-127,-83, -79,-126,-91,84,-26,-1,70,-54, 
  /* [14][0][][] */ 18,-1,35,19,-70,127,-56,-83, 42,20,-78,-5,60,46,-2,-50, -64,49,32,-44,-6,86,4,-20, 
  /* [15][0][][] */ 127,16,-8,20,-28,-59,-52,-22, 24,6,-14,-48,52,67,57,-1, 112,-50,39,-54,-17,50,-37,12, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 16,1,3,8 } };
const TfArray<16, float> quant7_scale = { 16, { 0.0026913774199783802, 0.0031471755355596542, 0.0050684479065239429, 0.0033131055533885956, 0.0029016679618507624, 0.00338953104801476, 0.0051470883190631866, 0.0035400316119194031, 0.0033460268750786781, 0.0048378445208072662, 0.0059725507162511349, 0.0022735779639333487, 0.0038647984620183706, 0.0022008807864040136, 0.0037162329535931349, 0.0041605867445468903, } };
const TfArray<16, int> quant7_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[4] = { 1, 1, 400, 50, };
const TfArray<1, int> tensor_dimension8 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data9[4] = { 1, 400, 1, 8, };
const TfArray<1, int> tensor_dimension9 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data10[4] = { 1, 1, 200, 8, };
const TfArray<1, int> tensor_dimension10 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data11[4] = { 1, 200, 1, 16, };
const TfArray<1, int> tensor_dimension11 = { 1, { 4 } };
const TfArray<4, int> tensor_dimension12 = { 4, { 1,1,400,50 } };
const TfArray<1, float> quant12_scale = { 1, { 0.0035386029630899429, } };
const TfArray<1, int> quant12_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const TfArray<4, int> tensor_dimension13 = { 4, { 1,1,400,8 } };
const TfArray<1, float> quant13_scale = { 1, { 0.0071125300601124763, } };
const TfArray<1, int> quant13_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const TfArray<4, int> tensor_dimension14 = { 4, { 1,400,1,8 } };
const TfArray<1, float> quant14_scale = { 1, { 0.0071125300601124763, } };
const TfArray<1, int> quant14_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const TfArray<4, int> tensor_dimension15 = { 4, { 1,200,1,8 } };
const TfArray<1, float> quant15_scale = { 1, { 0.0071125300601124763, } };
const TfArray<1, int> quant15_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const TfArray<4, int> tensor_dimension16 = { 4, { 1,1,200,8 } };
const TfArray<1, float> quant16_scale = { 1, { 0.0071125300601124763, } };
const TfArray<1, int> quant16_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const TfArray<4, int> tensor_dimension17 = { 4, { 1,1,200,16 } };
const TfArray<1, float> quant17_scale = { 1, { 0.0088621554896235466, } };
const TfArray<1, int> quant17_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const TfArray<4, int> tensor_dimension18 = { 4, { 1,200,1,16 } };
const TfArray<1, float> quant18_scale = { 1, { 0.0088621554896235466, } };
const TfArray<1, int> quant18_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const TfArray<4, int> tensor_dimension19 = { 4, { 1,100,1,16 } };
const TfArray<1, float> quant19_scale = { 1, { 0.0088621554896235466, } };
const TfArray<1, int> quant19_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const TfArray<2, int> tensor_dimension20 = { 2, { 1,1600 } };
const TfArray<1, float> quant20_scale = { 1, { 0.0088621554896235466, } };
const TfArray<1, int> quant20_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const TfArray<2, int> tensor_dimension21 = { 2, { 1,3 } };
const TfArray<1, float> quant21_scale = { 1, { 0.29364469647407532, } };
const TfArray<1, int> quant21_zero = { 1, { -43 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const TfArray<2, int> tensor_dimension22 = { 2, { 1,3 } };
const TfArray<1, float> quant22_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant22_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,8 } };
const TfArray<1, int> outputs0 = { 1, { 12 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 12,6,2 } };
const TfArray<1, int> outputs1 = { 1, { 13 } };
const TfLiteReshapeParams opdata2 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs2 = { 2, { 13,9 } };
const TfArray<1, int> outputs2 = { 1, { 14 } };
const TfLitePoolParams opdata3 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs3 = { 1, { 14 } };
const TfArray<1, int> outputs3 = { 1, { 15 } };
const TfLiteReshapeParams opdata4 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs4 = { 2, { 15,10 } };
const TfArray<1, int> outputs4 = { 1, { 16 } };
const TfLiteConvParams opdata5 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 16,7,3 } };
const TfArray<1, int> outputs5 = { 1, { 17 } };
const TfLiteReshapeParams opdata6 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs6 = { 2, { 17,11 } };
const TfArray<1, int> outputs6 = { 1, { 18 } };
const TfLitePoolParams opdata7 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs7 = { 1, { 18 } };
const TfArray<1, int> outputs7 = { 1, { 19 } };
const TfLiteReshapeParams opdata8 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs8 = { 2, { 19,1 } };
const TfArray<1, int> outputs8 = { 1, { 20 } };
const TfLiteFullyConnectedParams opdata9 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs9 = { 3, { 20,5,4 } };
const TfArray<1, int> outputs9 = { 1, { 21 } };
const TfLiteSoftmaxParams opdata10 = { 1 };
const TfArray<1, int> inputs10 = { 1, { 21 } };
const TfArray<1, int> outputs10 = { 1, { 22 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 20000, (TfLiteIntArray*)&tensor_dimension0, 20000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 8, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 4800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 1200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension12, 20000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 20000, (TfLiteIntArray*)&tensor_dimension13, 3200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension14, 3200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 3200, (TfLiteIntArray*)&tensor_dimension15, 1600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension16, 1600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 3200, (TfLiteIntArray*)&tensor_dimension17, 3200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension18, 3200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 3200, (TfLiteIntArray*)&tensor_dimension19, 1600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension20, 1600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1600, (TfLiteIntArray*)&tensor_dimension21, 3, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension22, 3, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_SOFTMAX, },
};
static std::vector<void*> overflow_buffers;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers.push_back(ptr);
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static std::vector<scratch_buffer_t> scratch_buffers;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    return kTfLiteError;
  }

  scratch_buffers.push_back(b);

  *buffer_idx = scratch_buffers.size() - 1;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > static_cast<int>(scratch_buffers.size()) - 1) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
  return &tflTensors[tensor_idx];
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
  return &tflEvalTensors[tensor_idx];
}

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 23;
  for(size_t i = 0; i < 23; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflEvalTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    tflEvalTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
     tflEvalTensors[i].data.data =  start;
    }
    else{
       tflTensors[i].data.data = tensorData[i].data;
       tflEvalTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for(size_t i = 0; i < 11; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for(size_t i = 0; i < 11; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  22, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for(size_t i = 0; i < 11; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif
  scratch_buffers.clear();
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
    free(overflow_buffers[ix]);
  }
  overflow_buffers.clear();
  return kTfLiteOk;
}
